{"env_info": "sys.platform: linux\nPython: 3.10.8 (main, Nov 24 2022, 14:13:03) [GCC 11.2.0]\nCUDA available: True\nGPU 0: GeForce RTX 3090\nCUDA_HOME: /home/tungnx/miniconda3/envs/zaloenv\nNVCC: Cuda compilation tools, release 11.7, V11.7.99\nGCC: gcc (Debian 10.2.1-6) 10.2.1 20210110\nPyTorch: 1.13.1\nPyTorch compiling details: PyTorch built with:\n  - GCC 9.3\n  - C++ Version: 201402\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.7\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37\n  - CuDNN 8.5\n  - Magma 2.6.1\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.14.1\nOpenCV: 4.6.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 9.3\nMMCV CUDA Compiler: 11.7\nMMDetection: 2.26.0+", "config": "img_scale = (1536, 1536)\nmodel = dict(\n    type='HybridTaskCascade',\n    backbone=dict(\n        type='DetectoRS_ResNet',\n        depth=101,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        conv_cfg=dict(type='ConvAWS'),\n        sac=dict(type='SAC', use_deform=True),\n        stage_with_sac=(False, True, True, True),\n        output_img=True),\n    neck=dict(\n        type='RFP',\n        rfp_steps=2,\n        aspp_out_channels=64,\n        aspp_dilations=(1, 3, 6, 1),\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5,\n        rfp_backbone=dict(\n            rfp_inplanes=256,\n            type='DetectoRS_ResNet',\n            depth=101,\n            num_stages=4,\n            out_indices=(0, 1, 2, 3),\n            frozen_stages=1,\n            norm_cfg=dict(type='BN', requires_grad=True),\n            norm_eval=True,\n            conv_cfg=dict(type='ConvAWS'),\n            sac=dict(type='SAC', use_deform=True),\n            stage_with_sac=(False, True, True, True),\n            style='pytorch')),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.1, 0.2, 0.33, 0.5],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(\n            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),\n    roi_head=dict(\n        type='HybridTaskCascadeRoIHead',\n        interleaved=True,\n        mask_info_flow=True,\n        num_stages=3,\n        stage_loss_weights=[1, 0.5, 0.25],\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=[\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=1,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=1,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,\n                               loss_weight=1.0)),\n            dict(\n                type='Shared2FCBBoxHead',\n                in_channels=256,\n                fc_out_channels=1024,\n                roi_feat_size=7,\n                num_classes=1,\n                bbox_coder=dict(\n                    type='DeltaXYWHBBoxCoder',\n                    target_means=[0.0, 0.0, 0.0, 0.0],\n                    target_stds=[0.1, 0.1, 0.2, 0.2]),\n                reg_class_agnostic=True,\n                loss_cls=dict(\n                    type='CrossEntropyLoss',\n                    use_sigmoid=False,\n                    loss_weight=1.0),\n                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))\n        ],\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=[\n            dict(\n                type='HTCMaskHead',\n                with_conv_res=False,\n                num_convs=4,\n                in_channels=256,\n                conv_out_channels=256,\n                num_classes=1,\n                loss_mask=dict(\n                    type='CrossEntropyLoss', use_mask=True, loss_weight=1.0)),\n            dict(\n                type='HTCMaskHead',\n                num_convs=4,\n                in_channels=256,\n                conv_out_channels=256,\n                num_classes=1,\n                loss_mask=dict(\n                    type='CrossEntropyLoss', use_mask=True, loss_weight=1.0)),\n            dict(\n                type='HTCMaskHead',\n                num_convs=4,\n                in_channels=256,\n                conv_out_channels=256,\n                num_classes=1,\n                loss_mask=dict(\n                    type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))\n        ]),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=0,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=2000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=[\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.5,\n                    neg_iou_thr=0.5,\n                    min_pos_iou=0.5,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.6,\n                    neg_iou_thr=0.6,\n                    min_pos_iou=0.6,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False),\n            dict(\n                assigner=dict(\n                    type='MaxIoUAssigner',\n                    pos_iou_thr=0.7,\n                    neg_iou_thr=0.7,\n                    min_pos_iou=0.7,\n                    ignore_iof_thr=-1),\n                sampler=dict(\n                    type='RandomSampler',\n                    num=512,\n                    pos_fraction=0.25,\n                    neg_pos_ub=-1,\n                    add_gt_as_proposals=True),\n                mask_size=28,\n                pos_weight=-1,\n                debug=False)\n        ]),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.001,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\nclasses = ('blood_vessels', )\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\nalbu_train_transforms = [\n    dict(\n        type='ShiftScaleRotate',\n        shift_limit=0.0725,\n        scale_limit=0.125,\n        rotate_limit=15,\n        interpolation=1,\n        p=0.4),\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(\n                type='RGBShift',\n                r_shift_limit=5,\n                g_shift_limit=5,\n                b_shift_limit=5,\n                p=1.0),\n            dict(\n                type='HueSaturationValue',\n                hue_shift_limit=10,\n                sat_shift_limit=15,\n                val_shift_limit=10,\n                p=1.0),\n            dict(\n                type='RandomBrightnessContrast',\n                brightness_limit=0.2,\n                contrast_limit=0.2,\n                p=1.0)\n        ],\n        p=0.2),\n    dict(type='HorizontalFlip', p=0.5),\n    dict(type='VerticalFlip', p=0.5),\n    dict(type='RandomRotate90', p=0.5),\n    dict(\n        type='OneOf',\n        transforms=[\n            dict(type='Blur', blur_limit=3, p=1.0),\n            dict(type='MedianBlur', blur_limit=3, p=1.0),\n            dict(type='GaussNoise', var_limit=5, p=1.0)\n        ],\n        p=0.2)\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=6,\n    pin_memory=True,\n    drop_last=False,\n    train=dict(\n        type='CocoDataset',\n        classes=('blood_vessels', ),\n        ann_file='/storage/tungnx/train_fold_0.json',\n        img_prefix='',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(\n                type='Resize',\n                img_scale=[(1536, 1536)],\n                multiscale_mode='value',\n                keep_ratio=True),\n            dict(\n                type='RandomFlip',\n                direction=['horizontal', 'vertical'],\n                flip_ratio=0.5),\n            dict(\n                type='AutoAugment',\n                policies=[[{\n                    'type': 'Shear',\n                    'prob': 0.4,\n                    'level': 0\n                }],\n                          [{\n                              'type': 'Rotate',\n                              'prob': 0.6,\n                              'level': 10\n                          }, {\n                              'type': 'ColorTransform',\n                              'prob': 1.0,\n                              'level': 6\n                          }, {\n                              'type': 'EqualizeTransform'\n                          }]]),\n            dict(\n                type='Albu',\n                transforms=[\n                    dict(\n                        type='ShiftScaleRotate',\n                        shift_limit=0.0725,\n                        scale_limit=0.125,\n                        rotate_limit=15,\n                        interpolation=1,\n                        p=0.4),\n                    dict(\n                        type='OneOf',\n                        transforms=[\n                            dict(\n                                type='RGBShift',\n                                r_shift_limit=5,\n                                g_shift_limit=5,\n                                b_shift_limit=5,\n                                p=1.0),\n                            dict(\n                                type='HueSaturationValue',\n                                hue_shift_limit=10,\n                                sat_shift_limit=15,\n                                val_shift_limit=10,\n                                p=1.0),\n                            dict(\n                                type='RandomBrightnessContrast',\n                                brightness_limit=0.2,\n                                contrast_limit=0.2,\n                                p=1.0)\n                        ],\n                        p=0.2),\n                    dict(type='HorizontalFlip', p=0.5),\n                    dict(type='VerticalFlip', p=0.5)\n                ],\n                bbox_params=dict(\n                    type='BboxParams',\n                    format='pascal_voc',\n                    label_fields=['gt_labels'],\n                    min_visibility=0.0,\n                    filter_lost_elements=True),\n                keymap=dict(img='image', gt_bboxes='bboxes', gt_masks='masks'),\n                update_pad_shape=False,\n                skip_img_without_anno=True),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        classes=('blood_vessels', ),\n        ann_file='/storage/tungnx/valid_fold_0.json',\n        img_prefix='',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=[(1536, 1536)],\n                flip=True,\n                flip_direction=['horizontal', 'vertical'],\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        classes=('blood_vessels', ),\n        ann_file='/storage/tungnx/valid_fold_0.json',\n        img_prefix='',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=[(1536, 1536)],\n                flip=True,\n                flip_direction=['horizontal', 'vertical'],\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(interval=1, metric=['segm'], save_best='segm_mAP')\noptimizer = dict(type='AdamW', lr=5e-05, weight_decay=0.05)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='CosineAnnealing',\n    by_epoch=False,\n    warmup='linear',\n    warmup_iters=100,\n    warmup_ratio=0.001,\n    min_lr=1e-08)\nrunner = dict(type='EpochBasedRunner', max_epochs=20)\nwork_dir = './work_dirs//hubmap/1class_ds1/detectors_res2net101/fold0/2048/'\ncheckpoint_config = dict(interval=-1, save_optimizer=False)\nlog_config = dict(interval=40, hooks=[dict(type='TextLoggerHook')])\ndefault_scope = 'mmdet'\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'https://download.openmmlab.com/mmdetection/v2.0/detectors/detectors_htc_r101_20e_coco/detectors_htc_r101_20e_coco_20210419_203638-348d533b.pth'\nresume_from = None\nfp16 = dict(loss_scale=dict(init_scale=512))\nworkflow = [('train', 1)]\nauto_resume = False\ngpu_ids = [0]\n", "seed": 1791095845, "exp_name": "custom_config_ds12_fold0.py", "hook_msgs": {}}
{"mode": "train", "epoch": 1, "iter": 40, "lr": 2e-05, "memory": 18174, "data_time": 0.13033, "loss_rpn_cls": 0.54604, "loss_rpn_bbox": 0.17989, "s0.loss_cls": 0.20907, "s0.acc": 97.34619, "s0.loss_bbox": 0.03398, "s0.loss_mask": 0.68646, "s1.loss_cls": 0.1127, "s1.acc": 96.50146, "s1.loss_bbox": 0.00751, "s1.loss_mask": 0.39857, "s2.loss_cls": 0.04289, "s2.acc": 98.28857, "s2.loss_bbox": 0.00145, "s2.loss_mask": 0.19493, "loss": 2.41349, "time": 2.19209}
{"mode": "train", "epoch": 1, "iter": 80, "lr": 4e-05, "memory": 18445, "data_time": 0.05073, "loss_rpn_cls": 0.13951, "loss_rpn_bbox": 0.10071, "s0.loss_cls": 0.15793, "s0.acc": 95.72754, "s0.loss_bbox": 0.07615, "s0.loss_mask": 0.60585, "s1.loss_cls": 0.05479, "s1.acc": 97.37793, "s1.loss_bbox": 0.01064, "s1.loss_mask": 0.32755, "s2.loss_cls": 0.02044, "s2.acc": 98.21533, "s2.loss_bbox": 0.00087, "s2.loss_mask": 0.15416, "loss": 1.64861, "time": 2.13199}
{"mode": "train", "epoch": 1, "iter": 120, "lr": 5e-05, "memory": 19524, "data_time": 0.05601, "loss_rpn_cls": 0.12053, "loss_rpn_bbox": 0.10691, "s0.loss_cls": 0.15434, "s0.acc": 94.73877, "s0.loss_bbox": 0.07581, "s0.loss_mask": 0.34319, "s1.loss_cls": 0.07171, "s1.acc": 94.98779, "s1.loss_bbox": 0.02158, "s1.loss_mask": 0.16473, "s2.loss_cls": 0.03121, "s2.acc": 96.07178, "s2.loss_bbox": 0.00387, "s2.loss_mask": 0.08454, "loss": 1.17842, "time": 2.14637}
{"mode": "train", "epoch": 1, "iter": 160, "lr": 5e-05, "memory": 19646, "data_time": 0.05427, "loss_rpn_cls": 0.09485, "loss_rpn_bbox": 0.10057, "s0.loss_cls": 0.20575, "s0.acc": 92.01416, "s0.loss_bbox": 0.1339, "s0.loss_mask": 0.30472, "s1.loss_cls": 0.09891, "s1.acc": 91.56738, "s1.loss_bbox": 0.03868, "s1.loss_mask": 0.14645, "s2.loss_cls": 0.04276, "s2.acc": 93.39111, "s2.loss_bbox": 0.00754, "s2.loss_mask": 0.07305, "loss": 1.24717, "time": 2.1324}
{"mode": "val", "epoch": 1, "iter": 84, "lr": 5e-05, "segm_mAP": 0.258, "segm_mAP_50": 0.496, "segm_mAP_75": 0.25, "segm_mAP_s": 0.174, "segm_mAP_m": 0.293, "segm_mAP_l": 0.394, "segm_mAP_copypaste": "0.258 0.496 0.250 0.174 0.293 0.394"}
{"mode": "train", "epoch": 2, "iter": 40, "lr": 5e-05, "memory": 19646, "data_time": 0.1396, "loss_rpn_cls": 0.07191, "loss_rpn_bbox": 0.08648, "s0.loss_cls": 0.19515, "s0.acc": 92.33643, "s0.loss_bbox": 0.13901, "s0.loss_mask": 0.27593, "s1.loss_cls": 0.09857, "s1.acc": 91.72057, "s1.loss_bbox": 0.04488, "s1.loss_mask": 0.13069, "s2.loss_cls": 0.04556, "s2.acc": 92.25772, "s2.loss_bbox": 0.00998, "s2.loss_mask": 0.06502, "loss": 1.16316, "time": 2.21143}
{"mode": "train", "epoch": 2, "iter": 80, "lr": 5e-05, "memory": 19702, "data_time": 0.06124, "loss_rpn_cls": 0.04747, "loss_rpn_bbox": 0.07116, "s0.loss_cls": 0.18798, "s0.acc": 92.50244, "s0.loss_bbox": 0.14181, "s0.loss_mask": 0.25271, "s1.loss_cls": 0.10231, "s1.acc": 91.3618, "s1.loss_bbox": 0.04674, "s1.loss_mask": 0.12225, "s2.loss_cls": 0.04787, "s2.acc": 91.94952, "s2.loss_bbox": 0.01103, "s2.loss_mask": 0.06066, "loss": 1.092, "time": 2.1788}
{"mode": "train", "epoch": 2, "iter": 120, "lr": 5e-05, "memory": 19702, "data_time": 0.04411, "loss_rpn_cls": 0.04548, "loss_rpn_bbox": 0.05588, "s0.loss_cls": 0.17108, "s0.acc": 93.32764, "s0.loss_bbox": 0.12263, "s0.loss_mask": 0.26435, "s1.loss_cls": 0.0897, "s1.acc": 92.47207, "s1.loss_bbox": 0.04069, "s1.loss_mask": 0.13157, "s2.loss_cls": 0.042, "s2.acc": 92.81013, "s2.loss_bbox": 0.00924, "s2.loss_mask": 0.06469, "loss": 1.03731, "time": 2.11053}
{"mode": "train", "epoch": 2, "iter": 160, "lr": 5e-05, "memory": 19969, "data_time": 0.05198, "loss_rpn_cls": 0.0487, "loss_rpn_bbox": 0.0649, "s0.loss_cls": 0.17472, "s0.acc": 93.0542, "s0.loss_bbox": 0.12441, "s0.loss_mask": 0.25663, "s1.loss_cls": 0.08954, "s1.acc": 92.63903, "s1.loss_bbox": 0.0422, "s1.loss_mask": 0.126, "s2.loss_cls": 0.04182, "s2.acc": 92.85751, "s2.loss_bbox": 0.00959, "s2.loss_mask": 0.06109, "loss": 1.03959, "time": 2.13173}
{"mode": "val", "epoch": 2, "iter": 84, "lr": 5e-05, "segm_mAP": 0.345, "segm_mAP_50": 0.649, "segm_mAP_75": 0.336, "segm_mAP_s": 0.208, "segm_mAP_m": 0.418, "segm_mAP_l": 0.49, "segm_mAP_copypaste": "0.345 0.649 0.336 0.208 0.418 0.490"}
{"mode": "train", "epoch": 3, "iter": 40, "lr": 5e-05, "memory": 19969, "data_time": 0.13125, "loss_rpn_cls": 0.05033, "loss_rpn_bbox": 0.06845, "s0.loss_cls": 0.16389, "s0.acc": 93.60596, "s0.loss_bbox": 0.11891, "s0.loss_mask": 0.24006, "s1.loss_cls": 0.08522, "s1.acc": 93.00861, "s1.loss_bbox": 0.04382, "s1.loss_mask": 0.115, "s2.loss_cls": 0.04299, "s2.acc": 92.48375, "s2.loss_bbox": 0.01119, "s2.loss_mask": 0.0576, "loss": 0.99747, "time": 2.1841}
{"mode": "train", "epoch": 3, "iter": 80, "lr": 5e-05, "memory": 19969, "data_time": 0.04911, "loss_rpn_cls": 0.04297, "loss_rpn_bbox": 0.06145, "s0.loss_cls": 0.17534, "s0.acc": 92.9248, "s0.loss_bbox": 0.13387, "s0.loss_mask": 0.23557, "s1.loss_cls": 0.09241, "s1.acc": 92.14432, "s1.loss_bbox": 0.04669, "s1.loss_mask": 0.11447, "s2.loss_cls": 0.04538, "s2.acc": 91.94385, "s2.loss_bbox": 0.01151, "s2.loss_mask": 0.05644, "loss": 1.0161, "time": 2.14016}
{"mode": "train", "epoch": 3, "iter": 120, "lr": 5e-05, "memory": 19981, "data_time": 0.05843, "loss_rpn_cls": 0.04116, "loss_rpn_bbox": 0.06148, "s0.loss_cls": 0.17469, "s0.acc": 93.20801, "s0.loss_bbox": 0.12903, "s0.loss_mask": 0.24759, "s1.loss_cls": 0.09521, "s1.acc": 92.25254, "s1.loss_bbox": 0.04727, "s1.loss_mask": 0.12048, "s2.loss_cls": 0.04664, "s2.acc": 91.95678, "s2.loss_bbox": 0.01123, "s2.loss_mask": 0.05881, "loss": 1.03358, "time": 2.16255}
{"mode": "train", "epoch": 3, "iter": 160, "lr": 5e-05, "memory": 19981, "data_time": 0.05259, "loss_rpn_cls": 0.03961, "loss_rpn_bbox": 0.06132, "s0.loss_cls": 0.18091, "s0.acc": 92.96875, "s0.loss_bbox": 0.13156, "s0.loss_mask": 0.23638, "s1.loss_cls": 0.09321, "s1.acc": 92.38465, "s1.loss_bbox": 0.04539, "s1.loss_mask": 0.11621, "s2.loss_cls": 0.04646, "s2.acc": 91.73289, "s2.loss_bbox": 0.01145, "s2.loss_mask": 0.05746, "loss": 1.01997, "time": 2.16587}
{"mode": "val", "epoch": 3, "iter": 84, "lr": 5e-05, "segm_mAP": 0.365, "segm_mAP_50": 0.67, "segm_mAP_75": 0.364, "segm_mAP_s": 0.222, "segm_mAP_m": 0.419, "segm_mAP_l": 0.533, "segm_mAP_copypaste": "0.365 0.670 0.364 0.222 0.419 0.533"}
{"mode": "train", "epoch": 4, "iter": 40, "lr": 5e-05, "memory": 20018, "data_time": 0.14196, "loss_rpn_cls": 0.042, "loss_rpn_bbox": 0.05536, "s0.loss_cls": 0.15935, "s0.acc": 93.61328, "s0.loss_bbox": 0.12138, "s0.loss_mask": 0.2377, "s1.loss_cls": 0.08518, "s1.acc": 93.09899, "s1.loss_bbox": 0.04638, "s1.loss_mask": 0.11525, "s2.loss_cls": 0.04463, "s2.acc": 92.46828, "s2.loss_bbox": 0.01291, "s2.loss_mask": 0.05549, "loss": 0.97562, "time": 2.21652}
{"mode": "train", "epoch": 4, "iter": 80, "lr": 5e-05, "memory": 20018, "data_time": 0.05318, "loss_rpn_cls": 0.03324, "loss_rpn_bbox": 0.05364, "s0.loss_cls": 0.16242, "s0.acc": 93.71826, "s0.loss_bbox": 0.12044, "s0.loss_mask": 0.24573, "s1.loss_cls": 0.0862, "s1.acc": 93.06768, "s1.loss_bbox": 0.04334, "s1.loss_mask": 0.11731, "s2.loss_cls": 0.04248, "s2.acc": 92.9197, "s2.loss_bbox": 0.01072, "s2.loss_mask": 0.05666, "loss": 0.97219, "time": 2.14914}
{"mode": "train", "epoch": 4, "iter": 120, "lr": 5e-05, "memory": 20018, "data_time": 0.0491, "loss_rpn_cls": 0.03297, "loss_rpn_bbox": 0.0605, "s0.loss_cls": 0.17176, "s0.acc": 92.96143, "s0.loss_bbox": 0.1226, "s0.loss_mask": 0.23361, "s1.loss_cls": 0.09294, "s1.acc": 92.1562, "s1.loss_bbox": 0.04619, "s1.loss_mask": 0.11439, "s2.loss_cls": 0.04724, "s2.acc": 91.26979, "s2.loss_bbox": 0.01294, "s2.loss_mask": 0.0566, "loss": 0.99174, "time": 2.17951}
{"mode": "train", "epoch": 4, "iter": 160, "lr": 5e-05, "memory": 20018, "data_time": 0.05462, "loss_rpn_cls": 0.03, "loss_rpn_bbox": 0.0569, "s0.loss_cls": 0.16571, "s0.acc": 93.36426, "s0.loss_bbox": 0.12855, "s0.loss_mask": 0.23994, "s1.loss_cls": 0.08864, "s1.acc": 92.54472, "s1.loss_bbox": 0.04679, "s1.loss_mask": 0.11694, "s2.loss_cls": 0.0458, "s2.acc": 91.84882, "s2.loss_bbox": 0.01234, "s2.loss_mask": 0.05613, "loss": 0.98774, "time": 2.15242}
{"mode": "val", "epoch": 4, "iter": 84, "lr": 5e-05, "segm_mAP": 0.38, "segm_mAP_50": 0.698, "segm_mAP_75": 0.366, "segm_mAP_s": 0.225, "segm_mAP_m": 0.44, "segm_mAP_l": 0.56, "segm_mAP_copypaste": "0.380 0.698 0.366 0.225 0.440 0.560"}
{"mode": "train", "epoch": 5, "iter": 40, "lr": 4e-05, "memory": 20018, "data_time": 0.13562, "loss_rpn_cls": 0.04409, "loss_rpn_bbox": 0.05441, "s0.loss_cls": 0.15668, "s0.acc": 93.81104, "s0.loss_bbox": 0.12076, "s0.loss_mask": 0.22722, "s1.loss_cls": 0.08034, "s1.acc": 93.50403, "s1.loss_bbox": 0.04477, "s1.loss_mask": 0.11001, "s2.loss_cls": 0.04258, "s2.acc": 92.58735, "s2.loss_bbox": 0.01306, "s2.loss_mask": 0.0531, "loss": 0.94702, "time": 2.19171}
{"mode": "train", "epoch": 5, "iter": 80, "lr": 4e-05, "memory": 20018, "data_time": 0.06112, "loss_rpn_cls": 0.03579, "loss_rpn_bbox": 0.05299, "s0.loss_cls": 0.16229, "s0.acc": 93.49365, "s0.loss_bbox": 0.12129, "s0.loss_mask": 0.22969, "s1.loss_cls": 0.09048, "s1.acc": 92.50892, "s1.loss_bbox": 0.04669, "s1.loss_mask": 0.1094, "s2.loss_cls": 0.04693, "s2.acc": 91.49371, "s2.loss_bbox": 0.01292, "s2.loss_mask": 0.05302, "loss": 0.96149, "time": 2.16624}
{"mode": "train", "epoch": 5, "iter": 120, "lr": 4e-05, "memory": 20018, "data_time": 0.05224, "loss_rpn_cls": 0.03401, "loss_rpn_bbox": 0.05198, "s0.loss_cls": 0.16333, "s0.acc": 93.52295, "s0.loss_bbox": 0.11483, "s0.loss_mask": 0.21761, "s1.loss_cls": 0.08598, "s1.acc": 92.9309, "s1.loss_bbox": 0.04286, "s1.loss_mask": 0.10463, "s2.loss_cls": 0.0445, "s2.acc": 92.23676, "s2.loss_bbox": 0.01172, "s2.loss_mask": 0.0509, "loss": 0.92235, "time": 2.18674}
{"mode": "train", "epoch": 5, "iter": 160, "lr": 4e-05, "memory": 20018, "data_time": 0.04844, "loss_rpn_cls": 0.03534, "loss_rpn_bbox": 0.04706, "s0.loss_cls": 0.15451, "s0.acc": 94.06494, "s0.loss_bbox": 0.10982, "s0.loss_mask": 0.22547, "s1.loss_cls": 0.08014, "s1.acc": 93.65268, "s1.loss_bbox": 0.04355, "s1.loss_mask": 0.10962, "s2.loss_cls": 0.04281, "s2.acc": 92.86433, "s2.loss_bbox": 0.01325, "s2.loss_mask": 0.05447, "loss": 0.91604, "time": 2.14856}
{"mode": "val", "epoch": 5, "iter": 84, "lr": 4e-05, "segm_mAP": 0.395, "segm_mAP_50": 0.73, "segm_mAP_75": 0.375, "segm_mAP_s": 0.25, "segm_mAP_m": 0.472, "segm_mAP_l": 0.553, "segm_mAP_copypaste": "0.395 0.730 0.375 0.250 0.472 0.553"}
{"mode": "train", "epoch": 6, "iter": 40, "lr": 4e-05, "memory": 20019, "data_time": 0.12554, "loss_rpn_cls": 0.02705, "loss_rpn_bbox": 0.051, "s0.loss_cls": 0.15046, "s0.acc": 93.9917, "s0.loss_bbox": 0.11336, "s0.loss_mask": 0.23861, "s1.loss_cls": 0.08015, "s1.acc": 93.54202, "s1.loss_bbox": 0.04347, "s1.loss_mask": 0.11451, "s2.loss_cls": 0.04339, "s2.acc": 92.22323, "s2.loss_bbox": 0.01323, "s2.loss_mask": 0.05512, "loss": 0.93035, "time": 2.19573}
{"mode": "train", "epoch": 6, "iter": 80, "lr": 4e-05, "memory": 20019, "data_time": 0.06265, "loss_rpn_cls": 0.02611, "loss_rpn_bbox": 0.04871, "s0.loss_cls": 0.15203, "s0.acc": 94.02588, "s0.loss_bbox": 0.10949, "s0.loss_mask": 0.2219, "s1.loss_cls": 0.08341, "s1.acc": 92.98992, "s1.loss_bbox": 0.04551, "s1.loss_mask": 0.10968, "s2.loss_cls": 0.04547, "s2.acc": 91.80651, "s2.loss_bbox": 0.0131, "s2.loss_mask": 0.05364, "loss": 0.90905, "time": 2.17563}
{"mode": "train", "epoch": 6, "iter": 120, "lr": 4e-05, "memory": 20019, "data_time": 0.04931, "loss_rpn_cls": 0.025, "loss_rpn_bbox": 0.04119, "s0.loss_cls": 0.15466, "s0.acc": 93.7085, "s0.loss_bbox": 0.11534, "s0.loss_mask": 0.22633, "s1.loss_cls": 0.08348, "s1.acc": 92.82131, "s1.loss_bbox": 0.04547, "s1.loss_mask": 0.10772, "s2.loss_cls": 0.04386, "s2.acc": 91.73598, "s2.loss_bbox": 0.01234, "s2.loss_mask": 0.05191, "loss": 0.9073, "time": 2.19214}
{"mode": "train", "epoch": 6, "iter": 160, "lr": 4e-05, "memory": 20019, "data_time": 0.06085, "loss_rpn_cls": 0.03043, "loss_rpn_bbox": 0.05122, "s0.loss_cls": 0.18132, "s0.acc": 92.86865, "s0.loss_bbox": 0.14103, "s0.loss_mask": 0.22306, "s1.loss_cls": 0.0955, "s1.acc": 92.44728, "s1.loss_bbox": 0.05363, "s1.loss_mask": 0.10955, "s2.loss_cls": 0.05092, "s2.acc": 91.01139, "s2.loss_bbox": 0.01525, "s2.loss_mask": 0.05297, "loss": 1.00486, "time": 2.16595}
{"mode": "val", "epoch": 6, "iter": 84, "lr": 4e-05, "segm_mAP": 0.4, "segm_mAP_50": 0.743, "segm_mAP_75": 0.391, "segm_mAP_s": 0.254, "segm_mAP_m": 0.459, "segm_mAP_l": 0.544, "segm_mAP_copypaste": "0.400 0.743 0.391 0.254 0.459 0.544"}
{"mode": "train", "epoch": 7, "iter": 40, "lr": 4e-05, "memory": 20019, "data_time": 0.12985, "loss_rpn_cls": 0.02576, "loss_rpn_bbox": 0.04277, "s0.loss_cls": 0.15522, "s0.acc": 93.71826, "s0.loss_bbox": 0.11339, "s0.loss_mask": 0.2116, "s1.loss_cls": 0.08289, "s1.acc": 92.90831, "s1.loss_bbox": 0.04528, "s1.loss_mask": 0.10287, "s2.loss_cls": 0.04434, "s2.acc": 92.27956, "s2.loss_bbox": 0.01417, "s2.loss_mask": 0.04918, "loss": 0.88747, "time": 2.21745}
{"mode": "train", "epoch": 7, "iter": 80, "lr": 4e-05, "memory": 20019, "data_time": 0.04939, "loss_rpn_cls": 0.02345, "loss_rpn_bbox": 0.04896, "s0.loss_cls": 0.16815, "s0.acc": 93.2959, "s0.loss_bbox": 0.12203, "s0.loss_mask": 0.22872, "s1.loss_cls": 0.0882, "s1.acc": 92.92745, "s1.loss_bbox": 0.04731, "s1.loss_mask": 0.11063, "s2.loss_cls": 0.04729, "s2.acc": 91.89803, "s2.loss_bbox": 0.0141, "s2.loss_mask": 0.05365, "loss": 0.95249, "time": 2.13419}
{"mode": "train", "epoch": 7, "iter": 120, "lr": 4e-05, "memory": 20019, "data_time": 0.05288, "loss_rpn_cls": 0.02975, "loss_rpn_bbox": 0.04477, "s0.loss_cls": 0.14847, "s0.acc": 94.06738, "s0.loss_bbox": 0.10461, "s0.loss_mask": 0.21646, "s1.loss_cls": 0.08098, "s1.acc": 93.24531, "s1.loss_bbox": 0.04253, "s1.loss_mask": 0.10342, "s2.loss_cls": 0.0435, "s2.acc": 92.4453, "s2.loss_bbox": 0.01279, "s2.loss_mask": 0.04999, "loss": 0.87727, "time": 2.15306}
{"mode": "train", "epoch": 7, "iter": 160, "lr": 4e-05, "memory": 20019, "data_time": 0.0553, "loss_rpn_cls": 0.02546, "loss_rpn_bbox": 0.04764, "s0.loss_cls": 0.17524, "s0.acc": 93.125, "s0.loss_bbox": 0.12741, "s0.loss_mask": 0.21398, "s1.loss_cls": 0.09168, "s1.acc": 92.51172, "s1.loss_bbox": 0.04939, "s1.loss_mask": 0.10439, "s2.loss_cls": 0.04758, "s2.acc": 92.18794, "s2.loss_bbox": 0.01442, "s2.loss_mask": 0.0509, "loss": 0.9481, "time": 2.19747}
{"mode": "val", "epoch": 7, "iter": 84, "lr": 4e-05, "segm_mAP": 0.408, "segm_mAP_50": 0.742, "segm_mAP_75": 0.403, "segm_mAP_s": 0.256, "segm_mAP_m": 0.462, "segm_mAP_l": 0.574, "segm_mAP_copypaste": "0.408 0.742 0.403 0.256 0.462 0.574"}
{"mode": "train", "epoch": 8, "iter": 40, "lr": 4e-05, "memory": 20021, "data_time": 0.14287, "loss_rpn_cls": 0.02332, "loss_rpn_bbox": 0.0456, "s0.loss_cls": 0.15979, "s0.acc": 93.75244, "s0.loss_bbox": 0.1187, "s0.loss_mask": 0.22302, "s1.loss_cls": 0.08571, "s1.acc": 92.89167, "s1.loss_bbox": 0.04542, "s1.loss_mask": 0.10921, "s2.loss_cls": 0.04521, "s2.acc": 92.22419, "s2.loss_bbox": 0.0143, "s2.loss_mask": 0.05343, "loss": 0.92372, "time": 2.23119}
{"mode": "train", "epoch": 8, "iter": 80, "lr": 3e-05, "memory": 20021, "data_time": 0.04733, "loss_rpn_cls": 0.02375, "loss_rpn_bbox": 0.04249, "s0.loss_cls": 0.14576, "s0.acc": 94.07715, "s0.loss_bbox": 0.10877, "s0.loss_mask": 0.21203, "s1.loss_cls": 0.08214, "s1.acc": 93.27201, "s1.loss_bbox": 0.04438, "s1.loss_mask": 0.104, "s2.loss_cls": 0.04264, "s2.acc": 92.43916, "s2.loss_bbox": 0.01338, "s2.loss_mask": 0.05053, "loss": 0.86988, "time": 2.17608}
{"mode": "train", "epoch": 8, "iter": 120, "lr": 3e-05, "memory": 20021, "data_time": 0.04866, "loss_rpn_cls": 0.02618, "loss_rpn_bbox": 0.04577, "s0.loss_cls": 0.14682, "s0.acc": 94.24316, "s0.loss_bbox": 0.10648, "s0.loss_mask": 0.20423, "s1.loss_cls": 0.07517, "s1.acc": 94.09664, "s1.loss_bbox": 0.04143, "s1.loss_mask": 0.0993, "s2.loss_cls": 0.04001, "s2.acc": 93.32785, "s2.loss_bbox": 0.01254, "s2.loss_mask": 0.04851, "loss": 0.84644, "time": 2.14556}
{"mode": "train", "epoch": 8, "iter": 160, "lr": 3e-05, "memory": 20021, "data_time": 0.05758, "loss_rpn_cls": 0.02037, "loss_rpn_bbox": 0.04405, "s0.loss_cls": 0.16251, "s0.acc": 93.35693, "s0.loss_bbox": 0.1283, "s0.loss_mask": 0.21378, "s1.loss_cls": 0.08612, "s1.acc": 92.8242, "s1.loss_bbox": 0.05308, "s1.loss_mask": 0.10459, "s2.loss_cls": 0.04868, "s2.acc": 91.49733, "s2.loss_bbox": 0.01589, "s2.loss_mask": 0.05014, "loss": 0.92753, "time": 2.20012}
{"mode": "val", "epoch": 8, "iter": 84, "lr": 3e-05, "segm_mAP": 0.412, "segm_mAP_50": 0.752, "segm_mAP_75": 0.403, "segm_mAP_s": 0.259, "segm_mAP_m": 0.47, "segm_mAP_l": 0.594, "segm_mAP_copypaste": "0.412 0.752 0.403 0.259 0.470 0.594"}
{"mode": "train", "epoch": 9, "iter": 40, "lr": 3e-05, "memory": 20021, "data_time": 0.12748, "loss_rpn_cls": 0.02221, "loss_rpn_bbox": 0.04518, "s0.loss_cls": 0.14641, "s0.acc": 94.35791, "s0.loss_bbox": 0.10774, "s0.loss_mask": 0.20727, "s1.loss_cls": 0.07847, "s1.acc": 93.86636, "s1.loss_bbox": 0.04267, "s1.loss_mask": 0.10053, "s2.loss_cls": 0.04195, "s2.acc": 93.18181, "s2.loss_bbox": 0.01426, "s2.loss_mask": 0.0488, "loss": 0.85551, "time": 2.21209}
{"mode": "train", "epoch": 9, "iter": 80, "lr": 3e-05, "memory": 20021, "data_time": 0.06013, "loss_rpn_cls": 0.02278, "loss_rpn_bbox": 0.04277, "s0.loss_cls": 0.14486, "s0.acc": 94.14307, "s0.loss_bbox": 0.11139, "s0.loss_mask": 0.20253, "s1.loss_cls": 0.07921, "s1.acc": 93.25941, "s1.loss_bbox": 0.04455, "s1.loss_mask": 0.09872, "s2.loss_cls": 0.04277, "s2.acc": 92.3285, "s2.loss_bbox": 0.01377, "s2.loss_mask": 0.04753, "loss": 0.85089, "time": 2.19044}
{"mode": "train", "epoch": 9, "iter": 120, "lr": 3e-05, "memory": 20021, "data_time": 0.04884, "loss_rpn_cls": 0.02398, "loss_rpn_bbox": 0.03481, "s0.loss_cls": 0.14744, "s0.acc": 94.41895, "s0.loss_bbox": 0.10265, "s0.loss_mask": 0.21312, "s1.loss_cls": 0.07693, "s1.acc": 94.04148, "s1.loss_bbox": 0.04157, "s1.loss_mask": 0.1054, "s2.loss_cls": 0.04252, "s2.acc": 92.78048, "s2.loss_bbox": 0.01334, "s2.loss_mask": 0.05232, "loss": 0.85406, "time": 2.16936}
{"mode": "train", "epoch": 9, "iter": 160, "lr": 3e-05, "memory": 20021, "data_time": 0.05578, "loss_rpn_cls": 0.0232, "loss_rpn_bbox": 0.0435, "s0.loss_cls": 0.1577, "s0.acc": 93.68896, "s0.loss_bbox": 0.11162, "s0.loss_mask": 0.20871, "s1.loss_cls": 0.08368, "s1.acc": 93.17216, "s1.loss_bbox": 0.04452, "s1.loss_mask": 0.10098, "s2.loss_cls": 0.04554, "s2.acc": 92.07799, "s2.loss_bbox": 0.01404, "s2.loss_mask": 0.04893, "loss": 0.88241, "time": 2.16264}
{"mode": "val", "epoch": 9, "iter": 84, "lr": 3e-05, "segm_mAP": 0.412, "segm_mAP_50": 0.734, "segm_mAP_75": 0.414, "segm_mAP_s": 0.264, "segm_mAP_m": 0.464, "segm_mAP_l": 0.574, "segm_mAP_copypaste": "0.412 0.734 0.414 0.264 0.464 0.574"}
{"mode": "train", "epoch": 10, "iter": 40, "lr": 3e-05, "memory": 20021, "data_time": 0.12817, "loss_rpn_cls": 0.01856, "loss_rpn_bbox": 0.04078, "s0.loss_cls": 0.14946, "s0.acc": 94.23584, "s0.loss_bbox": 0.11236, "s0.loss_mask": 0.21215, "s1.loss_cls": 0.07758, "s1.acc": 93.90601, "s1.loss_bbox": 0.04705, "s1.loss_mask": 0.1036, "s2.loss_cls": 0.04356, "s2.acc": 92.55423, "s2.loss_bbox": 0.01498, "s2.loss_mask": 0.05014, "loss": 0.87023, "time": 2.22372}
{"mode": "train", "epoch": 10, "iter": 80, "lr": 3e-05, "memory": 20021, "data_time": 0.05474, "loss_rpn_cls": 0.01947, "loss_rpn_bbox": 0.04505, "s0.loss_cls": 0.15021, "s0.acc": 93.88428, "s0.loss_bbox": 0.11296, "s0.loss_mask": 0.20572, "s1.loss_cls": 0.07848, "s1.acc": 93.60309, "s1.loss_bbox": 0.04458, "s1.loss_mask": 0.0998, "s2.loss_cls": 0.04288, "s2.acc": 92.59872, "s2.loss_bbox": 0.01392, "s2.loss_mask": 0.04855, "loss": 0.86163, "time": 2.16436}
{"mode": "train", "epoch": 10, "iter": 120, "lr": 3e-05, "memory": 20021, "data_time": 0.04759, "loss_rpn_cls": 0.01898, "loss_rpn_bbox": 0.03157, "s0.loss_cls": 0.13817, "s0.acc": 94.52881, "s0.loss_bbox": 0.09409, "s0.loss_mask": 0.20352, "s1.loss_cls": 0.07358, "s1.acc": 94.13789, "s1.loss_bbox": 0.04027, "s1.loss_mask": 0.09948, "s2.loss_cls": 0.0402, "s2.acc": 93.27258, "s2.loss_bbox": 0.01291, "s2.loss_mask": 0.04723, "loss": 0.80001, "time": 2.1432}
{"mode": "train", "epoch": 10, "iter": 160, "lr": 3e-05, "memory": 20021, "data_time": 0.05081, "loss_rpn_cls": 0.02512, "loss_rpn_bbox": 0.03996, "s0.loss_cls": 0.13949, "s0.acc": 94.49219, "s0.loss_bbox": 0.09989, "s0.loss_mask": 0.20325, "s1.loss_cls": 0.07332, "s1.acc": 94.3012, "s1.loss_bbox": 0.04326, "s1.loss_mask": 0.09978, "s2.loss_cls": 0.04143, "s2.acc": 92.94982, "s2.loss_bbox": 0.01424, "s2.loss_mask": 0.0484, "loss": 0.82815, "time": 2.14536}
{"mode": "val", "epoch": 10, "iter": 84, "lr": 3e-05, "segm_mAP": 0.408, "segm_mAP_50": 0.765, "segm_mAP_75": 0.389, "segm_mAP_s": 0.248, "segm_mAP_m": 0.475, "segm_mAP_l": 0.571, "segm_mAP_copypaste": "0.408 0.765 0.389 0.248 0.475 0.571"}
{"mode": "train", "epoch": 11, "iter": 40, "lr": 2e-05, "memory": 20021, "data_time": 0.12956, "loss_rpn_cls": 0.01993, "loss_rpn_bbox": 0.03915, "s0.loss_cls": 0.13113, "s0.acc": 94.78271, "s0.loss_bbox": 0.10372, "s0.loss_mask": 0.20816, "s1.loss_cls": 0.06711, "s1.acc": 94.33165, "s1.loss_bbox": 0.04305, "s1.loss_mask": 0.10221, "s2.loss_cls": 0.038, "s2.acc": 93.39832, "s2.loss_bbox": 0.01392, "s2.loss_mask": 0.04989, "loss": 0.81628, "time": 2.22947}
{"mode": "train", "epoch": 11, "iter": 80, "lr": 2e-05, "memory": 20021, "data_time": 0.06077, "loss_rpn_cls": 0.02437, "loss_rpn_bbox": 0.04141, "s0.loss_cls": 0.14846, "s0.acc": 93.84521, "s0.loss_bbox": 0.10661, "s0.loss_mask": 0.22033, "s1.loss_cls": 0.07741, "s1.acc": 93.58041, "s1.loss_bbox": 0.04423, "s1.loss_mask": 0.10836, "s2.loss_cls": 0.04207, "s2.acc": 92.76382, "s2.loss_bbox": 0.01392, "s2.loss_mask": 0.05376, "loss": 0.88093, "time": 2.16077}
{"mode": "train", "epoch": 11, "iter": 120, "lr": 2e-05, "memory": 20021, "data_time": 0.04173, "loss_rpn_cls": 0.01937, "loss_rpn_bbox": 0.03636, "s0.loss_cls": 0.14064, "s0.acc": 94.48242, "s0.loss_bbox": 0.10164, "s0.loss_mask": 0.19227, "s1.loss_cls": 0.0729, "s1.acc": 94.31438, "s1.loss_bbox": 0.04303, "s1.loss_mask": 0.09468, "s2.loss_cls": 0.03929, "s2.acc": 93.53398, "s2.loss_bbox": 0.01358, "s2.loss_mask": 0.04595, "loss": 0.79972, "time": 2.12264}
{"mode": "train", "epoch": 11, "iter": 160, "lr": 2e-05, "memory": 20021, "data_time": 0.04997, "loss_rpn_cls": 0.01468, "loss_rpn_bbox": 0.02961, "s0.loss_cls": 0.12842, "s0.acc": 94.86572, "s0.loss_bbox": 0.09066, "s0.loss_mask": 0.19968, "s1.loss_cls": 0.06849, "s1.acc": 94.73722, "s1.loss_bbox": 0.04123, "s1.loss_mask": 0.09882, "s2.loss_cls": 0.03927, "s2.acc": 93.44545, "s2.loss_bbox": 0.01389, "s2.loss_mask": 0.0471, "loss": 0.77183, "time": 2.18504}
{"mode": "val", "epoch": 11, "iter": 84, "lr": 2e-05, "segm_mAP": 0.416, "segm_mAP_50": 0.771, "segm_mAP_75": 0.395, "segm_mAP_s": 0.262, "segm_mAP_m": 0.479, "segm_mAP_l": 0.584, "segm_mAP_copypaste": "0.416 0.771 0.395 0.262 0.479 0.584"}
{"mode": "train", "epoch": 12, "iter": 40, "lr": 2e-05, "memory": 20021, "data_time": 0.16545, "loss_rpn_cls": 0.01881, "loss_rpn_bbox": 0.04779, "s0.loss_cls": 0.15551, "s0.acc": 93.6792, "s0.loss_bbox": 0.12494, "s0.loss_mask": 0.21065, "s1.loss_cls": 0.08441, "s1.acc": 92.93435, "s1.loss_bbox": 0.04948, "s1.loss_mask": 0.10234, "s2.loss_cls": 0.04628, "s2.acc": 91.96536, "s2.loss_bbox": 0.01507, "s2.loss_mask": 0.04935, "loss": 0.90463, "time": 2.24896}
{"mode": "train", "epoch": 12, "iter": 80, "lr": 2e-05, "memory": 20021, "data_time": 0.04762, "loss_rpn_cls": 0.01966, "loss_rpn_bbox": 0.03031, "s0.loss_cls": 0.11784, "s0.acc": 95.21729, "s0.loss_bbox": 0.08663, "s0.loss_mask": 0.18647, "s1.loss_cls": 0.06348, "s1.acc": 94.79334, "s1.loss_bbox": 0.03869, "s1.loss_mask": 0.09143, "s2.loss_cls": 0.03522, "s2.acc": 94.19204, "s2.loss_bbox": 0.01343, "s2.loss_mask": 0.04457, "loss": 0.72774, "time": 2.16127}
{"mode": "train", "epoch": 12, "iter": 120, "lr": 2e-05, "memory": 20021, "data_time": 0.05068, "loss_rpn_cls": 0.01982, "loss_rpn_bbox": 0.03436, "s0.loss_cls": 0.13096, "s0.acc": 94.79004, "s0.loss_bbox": 0.09319, "s0.loss_mask": 0.19153, "s1.loss_cls": 0.06609, "s1.acc": 94.79839, "s1.loss_bbox": 0.04063, "s1.loss_mask": 0.09582, "s2.loss_cls": 0.03733, "s2.acc": 93.78897, "s2.loss_bbox": 0.01435, "s2.loss_mask": 0.04651, "loss": 0.77059, "time": 2.20513}
{"mode": "train", "epoch": 12, "iter": 160, "lr": 2e-05, "memory": 20021, "data_time": 0.04749, "loss_rpn_cls": 0.01676, "loss_rpn_bbox": 0.0345, "s0.loss_cls": 0.14425, "s0.acc": 94.31885, "s0.loss_bbox": 0.10385, "s0.loss_mask": 0.20568, "s1.loss_cls": 0.07436, "s1.acc": 94.00347, "s1.loss_bbox": 0.04491, "s1.loss_mask": 0.09943, "s2.loss_cls": 0.04096, "s2.acc": 93.12742, "s2.loss_bbox": 0.01514, "s2.loss_mask": 0.04771, "loss": 0.82756, "time": 2.14031}
{"mode": "val", "epoch": 12, "iter": 84, "lr": 2e-05, "segm_mAP": 0.42, "segm_mAP_50": 0.767, "segm_mAP_75": 0.409, "segm_mAP_s": 0.273, "segm_mAP_m": 0.477, "segm_mAP_l": 0.607, "segm_mAP_copypaste": "0.420 0.767 0.409 0.273 0.477 0.607"}
{"mode": "train", "epoch": 13, "iter": 40, "lr": 2e-05, "memory": 20021, "data_time": 0.15604, "loss_rpn_cls": 0.02435, "loss_rpn_bbox": 0.03658, "s0.loss_cls": 0.14119, "s0.acc": 94.44824, "s0.loss_bbox": 0.09998, "s0.loss_mask": 0.19799, "s1.loss_cls": 0.07414, "s1.acc": 94.15617, "s1.loss_bbox": 0.04402, "s1.loss_mask": 0.09724, "s2.loss_cls": 0.04032, "s2.acc": 93.21368, "s2.loss_bbox": 0.0142, "s2.loss_mask": 0.04685, "loss": 0.81685, "time": 2.24015}
{"mode": "train", "epoch": 13, "iter": 80, "lr": 2e-05, "memory": 20021, "data_time": 0.05215, "loss_rpn_cls": 0.01921, "loss_rpn_bbox": 0.03549, "s0.loss_cls": 0.1379, "s0.acc": 94.52881, "s0.loss_bbox": 0.096, "s0.loss_mask": 0.20276, "s1.loss_cls": 0.07093, "s1.acc": 94.28909, "s1.loss_bbox": 0.04043, "s1.loss_mask": 0.09915, "s2.loss_cls": 0.03876, "s2.acc": 93.39862, "s2.loss_bbox": 0.01305, "s2.loss_mask": 0.04862, "loss": 0.8023, "time": 2.15003}
{"mode": "train", "epoch": 13, "iter": 120, "lr": 1e-05, "memory": 20021, "data_time": 0.0407, "loss_rpn_cls": 0.02435, "loss_rpn_bbox": 0.03269, "s0.loss_cls": 0.13386, "s0.acc": 94.74365, "s0.loss_bbox": 0.09815, "s0.loss_mask": 0.19063, "s1.loss_cls": 0.06894, "s1.acc": 94.53104, "s1.loss_bbox": 0.04182, "s1.loss_mask": 0.0915, "s2.loss_cls": 0.03802, "s2.acc": 93.70754, "s2.loss_bbox": 0.01396, "s2.loss_mask": 0.04451, "loss": 0.77842, "time": 2.1623}
{"mode": "train", "epoch": 13, "iter": 160, "lr": 1e-05, "memory": 20021, "data_time": 0.0481, "loss_rpn_cls": 0.0201, "loss_rpn_bbox": 0.03337, "s0.loss_cls": 0.1258, "s0.acc": 95.00732, "s0.loss_bbox": 0.08596, "s0.loss_mask": 0.19602, "s1.loss_cls": 0.06517, "s1.acc": 94.68396, "s1.loss_bbox": 0.03731, "s1.loss_mask": 0.09566, "s2.loss_cls": 0.0351, "s2.acc": 94.09844, "s2.loss_bbox": 0.01225, "s2.loss_mask": 0.0465, "loss": 0.75323, "time": 2.12262}
{"mode": "val", "epoch": 13, "iter": 84, "lr": 1e-05, "segm_mAP": 0.43, "segm_mAP_50": 0.771, "segm_mAP_75": 0.416, "segm_mAP_s": 0.278, "segm_mAP_m": 0.485, "segm_mAP_l": 0.61, "segm_mAP_copypaste": "0.430 0.771 0.416 0.278 0.485 0.610"}
{"mode": "train", "epoch": 14, "iter": 40, "lr": 1e-05, "memory": 20021, "data_time": 0.12676, "loss_rpn_cls": 0.0154, "loss_rpn_bbox": 0.03026, "s0.loss_cls": 0.12572, "s0.acc": 95.11475, "s0.loss_bbox": 0.09231, "s0.loss_mask": 0.18846, "s1.loss_cls": 0.06593, "s1.acc": 94.66673, "s1.loss_bbox": 0.04024, "s1.loss_mask": 0.09322, "s2.loss_cls": 0.03615, "s2.acc": 93.78005, "s2.loss_bbox": 0.01317, "s2.loss_mask": 0.04541, "loss": 0.74626, "time": 2.21725}
{"mode": "train", "epoch": 14, "iter": 80, "lr": 1e-05, "memory": 20021, "data_time": 0.05385, "loss_rpn_cls": 0.01323, "loss_rpn_bbox": 0.03348, "s0.loss_cls": 0.1232, "s0.acc": 95.00488, "s0.loss_bbox": 0.09156, "s0.loss_mask": 0.18014, "s1.loss_cls": 0.06366, "s1.acc": 94.87126, "s1.loss_bbox": 0.04041, "s1.loss_mask": 0.08931, "s2.loss_cls": 0.03546, "s2.acc": 94.29486, "s2.loss_bbox": 0.01428, "s2.loss_mask": 0.04395, "loss": 0.7287, "time": 2.14907}
{"mode": "train", "epoch": 14, "iter": 120, "lr": 1e-05, "memory": 20021, "data_time": 0.03964, "loss_rpn_cls": 0.01777, "loss_rpn_bbox": 0.03208, "s0.loss_cls": 0.12571, "s0.acc": 95.22705, "s0.loss_bbox": 0.09267, "s0.loss_mask": 0.19275, "s1.loss_cls": 0.06261, "s1.acc": 95.24851, "s1.loss_bbox": 0.03798, "s1.loss_mask": 0.0951, "s2.loss_cls": 0.03452, "s2.acc": 94.07768, "s2.loss_bbox": 0.01241, "s2.loss_mask": 0.04603, "loss": 0.74962, "time": 2.16674}
{"mode": "train", "epoch": 14, "iter": 160, "lr": 1e-05, "memory": 20021, "data_time": 0.05724, "loss_rpn_cls": 0.01462, "loss_rpn_bbox": 0.03923, "s0.loss_cls": 0.14298, "s0.acc": 94.22119, "s0.loss_bbox": 0.10724, "s0.loss_mask": 0.1929, "s1.loss_cls": 0.07113, "s1.acc": 94.17676, "s1.loss_bbox": 0.04628, "s1.loss_mask": 0.09528, "s2.loss_cls": 0.03793, "s2.acc": 93.78027, "s2.loss_bbox": 0.01617, "s2.loss_mask": 0.04663, "loss": 0.81038, "time": 2.18316}
{"mode": "val", "epoch": 14, "iter": 84, "lr": 1e-05, "segm_mAP": 0.431, "segm_mAP_50": 0.782, "segm_mAP_75": 0.416, "segm_mAP_s": 0.272, "segm_mAP_m": 0.49, "segm_mAP_l": 0.629, "segm_mAP_copypaste": "0.431 0.782 0.416 0.272 0.490 0.629"}
{"mode": "train", "epoch": 15, "iter": 40, "lr": 1e-05, "memory": 20021, "data_time": 0.12371, "loss_rpn_cls": 0.01928, "loss_rpn_bbox": 0.02911, "s0.loss_cls": 0.12674, "s0.acc": 94.91211, "s0.loss_bbox": 0.09018, "s0.loss_mask": 0.18132, "s1.loss_cls": 0.06595, "s1.acc": 94.73662, "s1.loss_bbox": 0.03912, "s1.loss_mask": 0.09022, "s2.loss_cls": 0.03466, "s2.acc": 94.37792, "s2.loss_bbox": 0.01332, "s2.loss_mask": 0.04406, "loss": 0.73396, "time": 2.25806}
{"mode": "train", "epoch": 15, "iter": 80, "lr": 1e-05, "memory": 20021, "data_time": 0.04581, "loss_rpn_cls": 0.0216, "loss_rpn_bbox": 0.02897, "s0.loss_cls": 0.11259, "s0.acc": 95.5835, "s0.loss_bbox": 0.08116, "s0.loss_mask": 0.18521, "s1.loss_cls": 0.05839, "s1.acc": 95.2782, "s1.loss_bbox": 0.03626, "s1.loss_mask": 0.09133, "s2.loss_cls": 0.03203, "s2.acc": 94.63173, "s2.loss_bbox": 0.01312, "s2.loss_mask": 0.04497, "loss": 0.70563, "time": 2.12534}
{"mode": "train", "epoch": 15, "iter": 120, "lr": 1e-05, "memory": 20021, "data_time": 0.05035, "loss_rpn_cls": 0.02094, "loss_rpn_bbox": 0.03344, "s0.loss_cls": 0.12126, "s0.acc": 95.08301, "s0.loss_bbox": 0.09537, "s0.loss_mask": 0.18695, "s1.loss_cls": 0.06297, "s1.acc": 94.87422, "s1.loss_bbox": 0.04097, "s1.loss_mask": 0.09277, "s2.loss_cls": 0.03546, "s2.acc": 93.70785, "s2.loss_bbox": 0.01389, "s2.loss_mask": 0.04525, "loss": 0.74929, "time": 2.14462}
{"mode": "train", "epoch": 15, "iter": 160, "lr": 1e-05, "memory": 20021, "data_time": 0.0619, "loss_rpn_cls": 0.02133, "loss_rpn_bbox": 0.03459, "s0.loss_cls": 0.1363, "s0.acc": 94.83643, "s0.loss_bbox": 0.09622, "s0.loss_mask": 0.20661, "s1.loss_cls": 0.06556, "s1.acc": 95.00518, "s1.loss_bbox": 0.04186, "s1.loss_mask": 0.10196, "s2.loss_cls": 0.03748, "s2.acc": 93.7023, "s2.loss_bbox": 0.01441, "s2.loss_mask": 0.04885, "loss": 0.80516, "time": 2.17728}
{"mode": "val", "epoch": 15, "iter": 84, "lr": 1e-05, "segm_mAP": 0.435, "segm_mAP_50": 0.779, "segm_mAP_75": 0.416, "segm_mAP_s": 0.277, "segm_mAP_m": 0.494, "segm_mAP_l": 0.62, "segm_mAP_copypaste": "0.435 0.779 0.416 0.277 0.494 0.620"}
{"mode": "train", "epoch": 16, "iter": 40, "lr": 1e-05, "memory": 20021, "data_time": 0.13691, "loss_rpn_cls": 0.01456, "loss_rpn_bbox": 0.02797, "s0.loss_cls": 0.11792, "s0.acc": 95.37842, "s0.loss_bbox": 0.08924, "s0.loss_mask": 0.18755, "s1.loss_cls": 0.06063, "s1.acc": 95.23864, "s1.loss_bbox": 0.03944, "s1.loss_mask": 0.09291, "s2.loss_cls": 0.03434, "s2.acc": 94.32639, "s2.loss_bbox": 0.01429, "s2.loss_mask": 0.04497, "loss": 0.72383, "time": 2.22629}
{"mode": "train", "epoch": 16, "iter": 80, "lr": 1e-05, "memory": 20021, "data_time": 0.05777, "loss_rpn_cls": 0.01189, "loss_rpn_bbox": 0.0287, "s0.loss_cls": 0.11599, "s0.acc": 95.37354, "s0.loss_bbox": 0.08156, "s0.loss_mask": 0.17677, "s1.loss_cls": 0.05849, "s1.acc": 95.14498, "s1.loss_bbox": 0.03497, "s1.loss_mask": 0.088, "s2.loss_cls": 0.03174, "s2.acc": 94.73496, "s2.loss_bbox": 0.01312, "s2.loss_mask": 0.04292, "loss": 0.68415, "time": 2.14694}
{"mode": "train", "epoch": 16, "iter": 120, "lr": 1e-05, "memory": 20021, "data_time": 0.05784, "loss_rpn_cls": 0.0203, "loss_rpn_bbox": 0.03394, "s0.loss_cls": 0.12833, "s0.acc": 95.06348, "s0.loss_bbox": 0.09278, "s0.loss_mask": 0.19222, "s1.loss_cls": 0.06286, "s1.acc": 95.27584, "s1.loss_bbox": 0.03824, "s1.loss_mask": 0.09529, "s2.loss_cls": 0.03392, "s2.acc": 94.52136, "s2.loss_bbox": 0.01345, "s2.loss_mask": 0.04676, "loss": 0.75809, "time": 2.14749}
{"mode": "train", "epoch": 16, "iter": 160, "lr": 0.0, "memory": 20021, "data_time": 0.04516, "loss_rpn_cls": 0.01677, "loss_rpn_bbox": 0.02488, "s0.loss_cls": 0.12223, "s0.acc": 95.2832, "s0.loss_bbox": 0.08915, "s0.loss_mask": 0.18477, "s1.loss_cls": 0.06044, "s1.acc": 95.32075, "s1.loss_bbox": 0.03911, "s1.loss_mask": 0.09088, "s2.loss_cls": 0.03241, "s2.acc": 94.75237, "s2.loss_bbox": 0.01381, "s2.loss_mask": 0.04376, "loss": 0.71821, "time": 2.17572}
{"mode": "val", "epoch": 16, "iter": 84, "lr": 0.0, "segm_mAP": 0.426, "segm_mAP_50": 0.785, "segm_mAP_75": 0.417, "segm_mAP_s": 0.266, "segm_mAP_m": 0.489, "segm_mAP_l": 0.623, "segm_mAP_copypaste": "0.426 0.785 0.417 0.266 0.489 0.623"}
{"mode": "train", "epoch": 17, "iter": 40, "lr": 0.0, "memory": 20021, "data_time": 0.13891, "loss_rpn_cls": 0.01403, "loss_rpn_bbox": 0.03234, "s0.loss_cls": 0.12851, "s0.acc": 95.05859, "s0.loss_bbox": 0.09206, "s0.loss_mask": 0.18557, "s1.loss_cls": 0.06431, "s1.acc": 94.88173, "s1.loss_bbox": 0.03807, "s1.loss_mask": 0.09157, "s2.loss_cls": 0.03495, "s2.acc": 94.12696, "s2.loss_bbox": 0.01334, "s2.loss_mask": 0.04375, "loss": 0.7385, "time": 2.25784}
{"mode": "train", "epoch": 17, "iter": 80, "lr": 0.0, "memory": 20021, "data_time": 0.05499, "loss_rpn_cls": 0.01706, "loss_rpn_bbox": 0.03036, "s0.loss_cls": 0.11869, "s0.acc": 95.22949, "s0.loss_bbox": 0.08685, "s0.loss_mask": 0.18651, "s1.loss_cls": 0.05619, "s1.acc": 95.50488, "s1.loss_bbox": 0.0397, "s1.loss_mask": 0.09323, "s2.loss_cls": 0.03155, "s2.acc": 94.68905, "s2.loss_bbox": 0.01459, "s2.loss_mask": 0.04629, "loss": 0.721, "time": 2.16188}
{"mode": "train", "epoch": 17, "iter": 120, "lr": 0.0, "memory": 20021, "data_time": 0.04572, "loss_rpn_cls": 0.01185, "loss_rpn_bbox": 0.02888, "s0.loss_cls": 0.11918, "s0.acc": 95.29541, "s0.loss_bbox": 0.08778, "s0.loss_mask": 0.1781, "s1.loss_cls": 0.05923, "s1.acc": 95.29657, "s1.loss_bbox": 0.03772, "s1.loss_mask": 0.08798, "s2.loss_cls": 0.03303, "s2.acc": 94.41771, "s2.loss_bbox": 0.01293, "s2.loss_mask": 0.04251, "loss": 0.6992, "time": 2.14706}
{"mode": "train", "epoch": 17, "iter": 160, "lr": 0.0, "memory": 20021, "data_time": 0.05426, "loss_rpn_cls": 0.01477, "loss_rpn_bbox": 0.03052, "s0.loss_cls": 0.11207, "s0.acc": 95.5835, "s0.loss_bbox": 0.08566, "s0.loss_mask": 0.18362, "s1.loss_cls": 0.05495, "s1.acc": 95.45327, "s1.loss_bbox": 0.03791, "s1.loss_mask": 0.09037, "s2.loss_cls": 0.03109, "s2.acc": 94.96443, "s2.loss_bbox": 0.0132, "s2.loss_mask": 0.04393, "loss": 0.69808, "time": 2.14734}
{"mode": "val", "epoch": 17, "iter": 84, "lr": 0.0, "segm_mAP": 0.428, "segm_mAP_50": 0.778, "segm_mAP_75": 0.409, "segm_mAP_s": 0.273, "segm_mAP_m": 0.488, "segm_mAP_l": 0.613, "segm_mAP_copypaste": "0.428 0.778 0.409 0.273 0.488 0.613"}
{"mode": "train", "epoch": 18, "iter": 40, "lr": 0.0, "memory": 20021, "data_time": 0.14894, "loss_rpn_cls": 0.0189, "loss_rpn_bbox": 0.03118, "s0.loss_cls": 0.12491, "s0.acc": 95.07324, "s0.loss_bbox": 0.09381, "s0.loss_mask": 0.18076, "s1.loss_cls": 0.06213, "s1.acc": 95.11459, "s1.loss_bbox": 0.04103, "s1.loss_mask": 0.08835, "s2.loss_cls": 0.03665, "s2.acc": 94.21895, "s2.loss_bbox": 0.01342, "s2.loss_mask": 0.04281, "loss": 0.73395, "time": 2.24988}
{"mode": "train", "epoch": 18, "iter": 80, "lr": 0.0, "memory": 20021, "data_time": 0.04794, "loss_rpn_cls": 0.01252, "loss_rpn_bbox": 0.02867, "s0.loss_cls": 0.1183, "s0.acc": 95.27832, "s0.loss_bbox": 0.08663, "s0.loss_mask": 0.19071, "s1.loss_cls": 0.05877, "s1.acc": 95.43884, "s1.loss_bbox": 0.03909, "s1.loss_mask": 0.09463, "s2.loss_cls": 0.03411, "s2.acc": 94.4784, "s2.loss_bbox": 0.01384, "s2.loss_mask": 0.04514, "loss": 0.72242, "time": 2.15689}
{"mode": "train", "epoch": 18, "iter": 120, "lr": 0.0, "memory": 20021, "data_time": 0.05392, "loss_rpn_cls": 0.01301, "loss_rpn_bbox": 0.03068, "s0.loss_cls": 0.11505, "s0.acc": 95.55908, "s0.loss_bbox": 0.08718, "s0.loss_mask": 0.17925, "s1.loss_cls": 0.05757, "s1.acc": 95.61899, "s1.loss_bbox": 0.0397, "s1.loss_mask": 0.0887, "s2.loss_cls": 0.03302, "s2.acc": 94.55335, "s2.loss_bbox": 0.0137, "s2.loss_mask": 0.04306, "loss": 0.70092, "time": 2.14609}
{"mode": "train", "epoch": 18, "iter": 160, "lr": 0.0, "memory": 20021, "data_time": 0.04417, "loss_rpn_cls": 0.01573, "loss_rpn_bbox": 0.0261, "s0.loss_cls": 0.10482, "s0.acc": 95.84473, "s0.loss_bbox": 0.0781, "s0.loss_mask": 0.18869, "s1.loss_cls": 0.05359, "s1.acc": 95.72148, "s1.loss_bbox": 0.03559, "s1.loss_mask": 0.09246, "s2.loss_cls": 0.02884, "s2.acc": 95.26921, "s2.loss_bbox": 0.01277, "s2.loss_mask": 0.04543, "loss": 0.68213, "time": 2.14338}
{"mode": "val", "epoch": 18, "iter": 84, "lr": 0.0, "segm_mAP": 0.425, "segm_mAP_50": 0.784, "segm_mAP_75": 0.404, "segm_mAP_s": 0.271, "segm_mAP_m": 0.485, "segm_mAP_l": 0.616, "segm_mAP_copypaste": "0.425 0.784 0.404 0.271 0.485 0.616"}
{"mode": "train", "epoch": 19, "iter": 40, "lr": 0.0, "memory": 20021, "data_time": 0.12919, "loss_rpn_cls": 0.01403, "loss_rpn_bbox": 0.03039, "s0.loss_cls": 0.12425, "s0.acc": 95.24414, "s0.loss_bbox": 0.09194, "s0.loss_mask": 0.17936, "s1.loss_cls": 0.05947, "s1.acc": 95.36481, "s1.loss_bbox": 0.03837, "s1.loss_mask": 0.08755, "s2.loss_cls": 0.0319, "s2.acc": 95.05415, "s2.loss_bbox": 0.01394, "s2.loss_mask": 0.04263, "loss": 0.71382, "time": 2.2223}
{"mode": "train", "epoch": 19, "iter": 80, "lr": 0.0, "memory": 20021, "data_time": 0.05411, "loss_rpn_cls": 0.01811, "loss_rpn_bbox": 0.03439, "s0.loss_cls": 0.12653, "s0.acc": 95.00732, "s0.loss_bbox": 0.09094, "s0.loss_mask": 0.19162, "s1.loss_cls": 0.06316, "s1.acc": 94.98276, "s1.loss_bbox": 0.03871, "s1.loss_mask": 0.09451, "s2.loss_cls": 0.03512, "s2.acc": 94.27987, "s2.loss_bbox": 0.0135, "s2.loss_mask": 0.04586, "loss": 0.75246, "time": 2.16098}
{"mode": "train", "epoch": 19, "iter": 120, "lr": 0.0, "memory": 20021, "data_time": 0.04278, "loss_rpn_cls": 0.01252, "loss_rpn_bbox": 0.02509, "s0.loss_cls": 0.11204, "s0.acc": 95.60059, "s0.loss_bbox": 0.08645, "s0.loss_mask": 0.18474, "s1.loss_cls": 0.05514, "s1.acc": 95.58535, "s1.loss_bbox": 0.03824, "s1.loss_mask": 0.09249, "s2.loss_cls": 0.03076, "s2.acc": 94.92318, "s2.loss_bbox": 0.01372, "s2.loss_mask": 0.0448, "loss": 0.69601, "time": 2.15714}
{"mode": "train", "epoch": 19, "iter": 160, "lr": 0.0, "memory": 20021, "data_time": 0.06061, "loss_rpn_cls": 0.01705, "loss_rpn_bbox": 0.03024, "s0.loss_cls": 0.10661, "s0.acc": 95.9082, "s0.loss_bbox": 0.07675, "s0.loss_mask": 0.17259, "s1.loss_cls": 0.05349, "s1.acc": 95.77942, "s1.loss_bbox": 0.03361, "s1.loss_mask": 0.08461, "s2.loss_cls": 0.02984, "s2.acc": 95.17449, "s2.loss_bbox": 0.01234, "s2.loss_mask": 0.04108, "loss": 0.6582, "time": 2.20605}
{"mode": "val", "epoch": 19, "iter": 84, "lr": 0.0, "segm_mAP": 0.428, "segm_mAP_50": 0.779, "segm_mAP_75": 0.416, "segm_mAP_s": 0.272, "segm_mAP_m": 0.49, "segm_mAP_l": 0.616, "segm_mAP_copypaste": "0.428 0.779 0.416 0.272 0.490 0.616"}
{"mode": "train", "epoch": 20, "iter": 40, "lr": 0.0, "memory": 20021, "data_time": 0.13379, "loss_rpn_cls": 0.0141, "loss_rpn_bbox": 0.02964, "s0.loss_cls": 0.11644, "s0.acc": 95.59082, "s0.loss_bbox": 0.08701, "s0.loss_mask": 0.18702, "s1.loss_cls": 0.05828, "s1.acc": 95.25874, "s1.loss_bbox": 0.03634, "s1.loss_mask": 0.09107, "s2.loss_cls": 0.03122, "s2.acc": 94.94249, "s2.loss_bbox": 0.01263, "s2.loss_mask": 0.04437, "loss": 0.70812, "time": 2.23591}
{"mode": "train", "epoch": 20, "iter": 80, "lr": 0.0, "memory": 20021, "data_time": 0.04167, "loss_rpn_cls": 0.01199, "loss_rpn_bbox": 0.02816, "s0.loss_cls": 0.11541, "s0.acc": 95.44189, "s0.loss_bbox": 0.07992, "s0.loss_mask": 0.18222, "s1.loss_cls": 0.05529, "s1.acc": 95.71591, "s1.loss_bbox": 0.03554, "s1.loss_mask": 0.09136, "s2.loss_cls": 0.02975, "s2.acc": 95.43726, "s2.loss_bbox": 0.01339, "s2.loss_mask": 0.04416, "loss": 0.68718, "time": 2.16079}
{"mode": "train", "epoch": 20, "iter": 120, "lr": 0.0, "memory": 20021, "data_time": 0.03905, "loss_rpn_cls": 0.01475, "loss_rpn_bbox": 0.02579, "s0.loss_cls": 0.10656, "s0.acc": 95.88867, "s0.loss_bbox": 0.07594, "s0.loss_mask": 0.17198, "s1.loss_cls": 0.05267, "s1.acc": 95.9874, "s1.loss_bbox": 0.03343, "s1.loss_mask": 0.08566, "s2.loss_cls": 0.02896, "s2.acc": 95.54586, "s2.loss_bbox": 0.0126, "s2.loss_mask": 0.04182, "loss": 0.65015, "time": 2.14388}
{"mode": "train", "epoch": 20, "iter": 160, "lr": 0.0, "memory": 20021, "data_time": 0.06222, "loss_rpn_cls": 0.01391, "loss_rpn_bbox": 0.02941, "s0.loss_cls": 0.11346, "s0.acc": 95.39062, "s0.loss_bbox": 0.0896, "s0.loss_mask": 0.18803, "s1.loss_cls": 0.0565, "s1.acc": 95.58146, "s1.loss_bbox": 0.03977, "s1.loss_mask": 0.09286, "s2.loss_cls": 0.0319, "s2.acc": 94.97208, "s2.loss_bbox": 0.01403, "s2.loss_mask": 0.0451, "loss": 0.71456, "time": 2.19664}
{"mode": "val", "epoch": 20, "iter": 84, "lr": 0.0, "segm_mAP": 0.427, "segm_mAP_50": 0.779, "segm_mAP_75": 0.413, "segm_mAP_s": 0.272, "segm_mAP_m": 0.489, "segm_mAP_l": 0.61, "segm_mAP_copypaste": "0.427 0.779 0.413 0.272 0.489 0.610"}
