2023-06-30 11:10:13,478 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.10.8 (main, Nov 24 2022, 14:13:03) [GCC 11.2.0]
CUDA available: True
GPU 0: GeForce RTX 3090
CUDA_HOME: /home/tungnx/miniconda3/envs/zaloenv
NVCC: Cuda compilation tools, release 11.7, V11.7.99
GCC: gcc (Debian 10.2.1-6) 10.2.1 20210110
PyTorch: 1.13.1
PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.7
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.5
  - Magma 2.6.1
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.7, CUDNN_VERSION=8.5.0, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

TorchVision: 0.14.1
OpenCV: 4.6.0
MMCV: 1.7.0
MMCV Compiler: GCC 9.3
MMCV CUDA Compiler: 11.7
MMDetection: 2.26.0+
------------------------------------------------------------

2023-06-30 11:10:13,752 - mmdet - INFO - Distributed training: False
2023-06-30 11:10:14,021 - mmdet - INFO - Config:
img_scale = (1536, 1536)
model = dict(
    type='HybridTaskCascade',
    backbone=dict(
        type='DetectoRS_ResNet',
        depth=101,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        frozen_stages=1,
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=True,
        style='pytorch',
        conv_cfg=dict(type='ConvAWS'),
        sac=dict(type='SAC', use_deform=True),
        stage_with_sac=(False, True, True, True),
        output_img=True),
    neck=dict(
        type='RFP',
        rfp_steps=2,
        aspp_out_channels=64,
        aspp_dilations=(1, 3, 6, 1),
        in_channels=[256, 512, 1024, 2048],
        out_channels=256,
        num_outs=5,
        rfp_backbone=dict(
            rfp_inplanes=256,
            type='DetectoRS_ResNet',
            depth=101,
            num_stages=4,
            out_indices=(0, 1, 2, 3),
            frozen_stages=1,
            norm_cfg=dict(type='BN', requires_grad=True),
            norm_eval=True,
            conv_cfg=dict(type='ConvAWS'),
            sac=dict(type='SAC', use_deform=True),
            stage_with_sac=(False, True, True, True),
            style='pytorch')),
    rpn_head=dict(
        type='RPNHead',
        in_channels=256,
        feat_channels=256,
        anchor_generator=dict(
            type='AnchorGenerator',
            scales=[8],
            ratios=[0.1, 0.2, 0.33, 0.5],
            strides=[4, 8, 16, 32, 64]),
        bbox_coder=dict(
            type='DeltaXYWHBBoxCoder',
            target_means=[0.0, 0.0, 0.0, 0.0],
            target_stds=[1.0, 1.0, 1.0, 1.0]),
        loss_cls=dict(
            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),
        loss_bbox=dict(
            type='SmoothL1Loss', beta=0.1111111111111111, loss_weight=1.0)),
    roi_head=dict(
        type='HybridTaskCascadeRoIHead',
        interleaved=True,
        mask_info_flow=True,
        num_stages=3,
        stage_loss_weights=[1, 0.5, 0.25],
        bbox_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        bbox_head=[
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=1,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.1, 0.1, 0.2, 0.2]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=1,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.1, 0.1, 0.2, 0.2]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0,
                               loss_weight=1.0)),
            dict(
                type='Shared2FCBBoxHead',
                in_channels=256,
                fc_out_channels=1024,
                roi_feat_size=7,
                num_classes=1,
                bbox_coder=dict(
                    type='DeltaXYWHBBoxCoder',
                    target_means=[0.0, 0.0, 0.0, 0.0],
                    target_stds=[0.1, 0.1, 0.2, 0.2]),
                reg_class_agnostic=True,
                loss_cls=dict(
                    type='CrossEntropyLoss',
                    use_sigmoid=False,
                    loss_weight=1.0),
                loss_bbox=dict(type='SmoothL1Loss', beta=1.0, loss_weight=1.0))
        ],
        mask_roi_extractor=dict(
            type='SingleRoIExtractor',
            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),
            out_channels=256,
            featmap_strides=[4, 8, 16, 32]),
        mask_head=[
            dict(
                type='HTCMaskHead',
                with_conv_res=False,
                num_convs=4,
                in_channels=256,
                conv_out_channels=256,
                num_classes=1,
                loss_mask=dict(
                    type='CrossEntropyLoss', use_mask=True, loss_weight=1.0)),
            dict(
                type='HTCMaskHead',
                num_convs=4,
                in_channels=256,
                conv_out_channels=256,
                num_classes=1,
                loss_mask=dict(
                    type='CrossEntropyLoss', use_mask=True, loss_weight=1.0)),
            dict(
                type='HTCMaskHead',
                num_convs=4,
                in_channels=256,
                conv_out_channels=256,
                num_classes=1,
                loss_mask=dict(
                    type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))
        ]),
    train_cfg=dict(
        rpn=dict(
            assigner=dict(
                type='MaxIoUAssigner',
                pos_iou_thr=0.7,
                neg_iou_thr=0.3,
                min_pos_iou=0.3,
                ignore_iof_thr=-1),
            sampler=dict(
                type='RandomSampler',
                num=256,
                pos_fraction=0.5,
                neg_pos_ub=-1,
                add_gt_as_proposals=False),
            allowed_border=0,
            pos_weight=-1,
            debug=False),
        rpn_proposal=dict(
            nms_pre=2000,
            max_per_img=2000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=[
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.5,
                    neg_iou_thr=0.5,
                    min_pos_iou=0.5,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                mask_size=28,
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.6,
                    neg_iou_thr=0.6,
                    min_pos_iou=0.6,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                mask_size=28,
                pos_weight=-1,
                debug=False),
            dict(
                assigner=dict(
                    type='MaxIoUAssigner',
                    pos_iou_thr=0.7,
                    neg_iou_thr=0.7,
                    min_pos_iou=0.7,
                    ignore_iof_thr=-1),
                sampler=dict(
                    type='RandomSampler',
                    num=512,
                    pos_fraction=0.25,
                    neg_pos_ub=-1,
                    add_gt_as_proposals=True),
                mask_size=28,
                pos_weight=-1,
                debug=False)
        ]),
    test_cfg=dict(
        rpn=dict(
            nms_pre=1000,
            max_per_img=1000,
            nms=dict(type='nms', iou_threshold=0.7),
            min_bbox_size=0),
        rcnn=dict(
            score_thr=0.001,
            nms=dict(type='nms', iou_threshold=0.5),
            max_per_img=100,
            mask_thr_binary=0.5)))
dataset_type = 'CocoDataset'
classes = ('blood_vessels', )
img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
albu_train_transforms = [
    dict(
        type='ShiftScaleRotate',
        shift_limit=0.0725,
        scale_limit=0.125,
        rotate_limit=15,
        interpolation=1,
        p=0.4),
    dict(
        type='OneOf',
        transforms=[
            dict(
                type='RGBShift',
                r_shift_limit=5,
                g_shift_limit=5,
                b_shift_limit=5,
                p=1.0),
            dict(
                type='HueSaturationValue',
                hue_shift_limit=10,
                sat_shift_limit=15,
                val_shift_limit=10,
                p=1.0),
            dict(
                type='RandomBrightnessContrast',
                brightness_limit=0.2,
                contrast_limit=0.2,
                p=1.0)
        ],
        p=0.2),
    dict(type='HorizontalFlip', p=0.5),
    dict(type='VerticalFlip', p=0.5),
    dict(type='RandomRotate90', p=0.5),
    dict(
        type='OneOf',
        transforms=[
            dict(type='Blur', blur_limit=3, p=1.0),
            dict(type='MedianBlur', blur_limit=3, p=1.0),
            dict(type='GaussNoise', var_limit=5, p=1.0)
        ],
        p=0.2)
]
data = dict(
    samples_per_gpu=2,
    workers_per_gpu=6,
    pin_memory=True,
    drop_last=False,
    train=dict(
        type='CocoDataset',
        classes=('blood_vessels', ),
        ann_file='/storage/tungnx/train_fold_0.json',
        img_prefix='',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),
            dict(
                type='Resize',
                img_scale=[(1536, 1536)],
                multiscale_mode='value',
                keep_ratio=True),
            dict(
                type='RandomFlip',
                direction=['horizontal', 'vertical'],
                flip_ratio=0.5),
            dict(
                type='AutoAugment',
                policies=[[{
                    'type': 'Shear',
                    'prob': 0.4,
                    'level': 0
                }],
                          [{
                              'type': 'Rotate',
                              'prob': 0.6,
                              'level': 10
                          }, {
                              'type': 'ColorTransform',
                              'prob': 1.0,
                              'level': 6
                          }, {
                              'type': 'EqualizeTransform'
                          }]]),
            dict(
                type='Albu',
                transforms=[
                    dict(
                        type='ShiftScaleRotate',
                        shift_limit=0.0725,
                        scale_limit=0.125,
                        rotate_limit=15,
                        interpolation=1,
                        p=0.4),
                    dict(
                        type='OneOf',
                        transforms=[
                            dict(
                                type='RGBShift',
                                r_shift_limit=5,
                                g_shift_limit=5,
                                b_shift_limit=5,
                                p=1.0),
                            dict(
                                type='HueSaturationValue',
                                hue_shift_limit=10,
                                sat_shift_limit=15,
                                val_shift_limit=10,
                                p=1.0),
                            dict(
                                type='RandomBrightnessContrast',
                                brightness_limit=0.2,
                                contrast_limit=0.2,
                                p=1.0)
                        ],
                        p=0.2),
                    dict(type='HorizontalFlip', p=0.5),
                    dict(type='VerticalFlip', p=0.5)
                ],
                bbox_params=dict(
                    type='BboxParams',
                    format='pascal_voc',
                    label_fields=['gt_labels'],
                    min_visibility=0.0,
                    filter_lost_elements=True),
                keymap=dict(img='image', gt_bboxes='bboxes', gt_masks='masks'),
                update_pad_shape=False,
                skip_img_without_anno=True),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='Pad', size_divisor=32),
            dict(type='DefaultFormatBundle'),
            dict(
                type='Collect',
                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])
        ]),
    val=dict(
        type='CocoDataset',
        classes=('blood_vessels', ),
        ann_file='/storage/tungnx/valid_fold_0.json',
        img_prefix='',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=[(1536, 1536)],
                flip=True,
                flip_direction=['horizontal', 'vertical'],
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]),
    test=dict(
        type='CocoDataset',
        classes=('blood_vessels', ),
        ann_file='/storage/tungnx/valid_fold_0.json',
        img_prefix='',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(
                type='MultiScaleFlipAug',
                img_scale=[(1536, 1536)],
                flip=True,
                flip_direction=['horizontal', 'vertical'],
                transforms=[
                    dict(type='Resize', keep_ratio=True),
                    dict(type='RandomFlip'),
                    dict(
                        type='Normalize',
                        mean=[123.675, 116.28, 103.53],
                        std=[58.395, 57.12, 57.375],
                        to_rgb=True),
                    dict(type='Pad', size_divisor=32),
                    dict(type='ImageToTensor', keys=['img']),
                    dict(type='Collect', keys=['img'])
                ])
        ]))
evaluation = dict(interval=1, metric=['segm'], save_best='segm_mAP')
optimizer = dict(type='AdamW', lr=5e-05, weight_decay=0.05)
optimizer_config = dict(grad_clip=None)
lr_config = dict(
    policy='CosineAnnealing',
    by_epoch=False,
    warmup='linear',
    warmup_iters=100,
    warmup_ratio=0.001,
    min_lr=1e-08)
runner = dict(type='EpochBasedRunner', max_epochs=20)
work_dir = './work_dirs//hubmap/1class_ds1/detectors_res2net101/fold0/2048/'
checkpoint_config = dict(interval=-1, save_optimizer=False)
log_config = dict(interval=40, hooks=[dict(type='TextLoggerHook')])
default_scope = 'mmdet'
dist_params = dict(backend='nccl')
log_level = 'INFO'
load_from = 'https://download.openmmlab.com/mmdetection/v2.0/detectors/detectors_htc_r101_20e_coco/detectors_htc_r101_20e_coco_20210419_203638-348d533b.pth'
resume_from = None
fp16 = dict(loss_scale=dict(init_scale=512))
workflow = [('train', 1)]
auto_resume = False
gpu_ids = [0]

2023-06-30 11:10:14,022 - mmdet - INFO - Set random seed to 1791095845, deterministic: True
2023-06-30 11:10:15,840 - mmdet - INFO - initialize RPNHead with init_cfg {'type': 'Normal', 'layer': 'Conv2d', 'std': 0.01}
2023-06-30 11:10:15,843 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'distribution': 'uniform', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2023-06-30 11:10:15,907 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'distribution': 'uniform', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
2023-06-30 11:10:15,971 - mmdet - INFO - initialize Shared2FCBBoxHead with init_cfg [{'type': 'Normal', 'std': 0.01, 'override': {'name': 'fc_cls'}}, {'type': 'Normal', 'std': 0.001, 'override': {'name': 'fc_reg'}}, {'type': 'Xavier', 'distribution': 'uniform', 'override': [{'name': 'shared_fcs'}, {'name': 'cls_fcs'}, {'name': 'reg_fcs'}]}]
Name of parameter - Initialization information

backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.0.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.0.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.0.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.1.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.1.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer1.2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.2.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer1.2.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.2.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer1.2.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.conv2.weight_diff - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.0.conv2.switch.weight - torch.Size([1, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.conv2.pre_context.weight - torch.Size([128, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.conv2.pre_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.0.conv2.post_context.weight - torch.Size([128, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.conv2.post_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.0.conv2.offset_s.weight - torch.Size([18, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.0.conv2.offset_l.weight - torch.Size([18, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.1.conv2.weight_diff - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.1.conv2.switch.weight - torch.Size([1, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.1.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.1.conv2.pre_context.weight - torch.Size([128, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.1.conv2.pre_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.1.conv2.post_context.weight - torch.Size([128, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.1.conv2.post_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.1.conv2.offset_s.weight - torch.Size([18, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.1.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.1.conv2.offset_l.weight - torch.Size([18, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.1.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.1.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.1.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.2.conv2.weight_diff - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.2.conv2.switch.weight - torch.Size([1, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.2.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.2.conv2.pre_context.weight - torch.Size([128, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.2.conv2.pre_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.2.conv2.post_context.weight - torch.Size([128, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.2.conv2.post_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.2.conv2.offset_s.weight - torch.Size([18, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.2.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.2.conv2.offset_l.weight - torch.Size([18, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.2.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.2.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.2.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.2.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.2.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.3.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.3.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.3.conv2.weight_diff - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.3.conv2.switch.weight - torch.Size([1, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.3.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.3.conv2.pre_context.weight - torch.Size([128, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.3.conv2.pre_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.3.conv2.post_context.weight - torch.Size([128, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.3.conv2.post_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.3.conv2.offset_s.weight - torch.Size([18, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.3.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.3.conv2.offset_l.weight - torch.Size([18, 128, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.3.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.3.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.3.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.3.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer2.3.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.0.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.0.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.0.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.0.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.1.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.1.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.1.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.1.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.1.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.1.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.1.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.1.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.1.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.1.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.1.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.2.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.2.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.2.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.2.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.2.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.2.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.2.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.2.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.2.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.2.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.2.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.2.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.2.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.2.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.2.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.3.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.3.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.3.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.3.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.3.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.3.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.3.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.3.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.3.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.3.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.3.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.3.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.3.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.3.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.3.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.4.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.4.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.4.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.4.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.4.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.4.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.4.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.4.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.4.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.4.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.4.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.4.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.4.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.4.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.4.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.5.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.5.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.5.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.5.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.5.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.5.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.5.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.5.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.5.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.5.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.5.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.5.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.5.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.5.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.5.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.6.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.6.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.6.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.6.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.6.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.6.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.6.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.6.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.6.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.6.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.6.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.6.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.6.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.6.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.6.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.6.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.6.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.6.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.6.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.6.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.7.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.7.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.7.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.7.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.7.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.7.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.7.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.7.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.7.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.7.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.7.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.7.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.7.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.7.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.7.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.7.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.7.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.7.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.7.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.7.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.8.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.8.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.8.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.8.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.8.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.8.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.8.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.8.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.8.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.8.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.8.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.8.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.8.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.8.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.8.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.8.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.8.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.8.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.8.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.8.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.9.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.9.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.9.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.9.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.9.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.9.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.9.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.9.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.9.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.9.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.9.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.9.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.9.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.9.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.9.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.9.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.9.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.9.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.9.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.9.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.10.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.10.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.10.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.10.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.10.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.10.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.10.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.10.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.10.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.10.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.10.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.10.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.10.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.10.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.10.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.10.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.10.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.10.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.10.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.10.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.11.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.11.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.11.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.11.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.11.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.11.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.11.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.11.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.11.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.11.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.11.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.11.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.11.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.11.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.11.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.11.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.11.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.11.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.11.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.11.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.12.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.12.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.12.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.12.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.12.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.12.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.12.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.12.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.12.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.12.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.12.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.12.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.12.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.12.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.12.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.12.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.12.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.12.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.12.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.12.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.13.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.13.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.13.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.13.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.13.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.13.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.13.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.13.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.13.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.13.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.13.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.13.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.13.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.13.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.13.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.13.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.13.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.13.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.13.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.13.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.14.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.14.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.14.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.14.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.14.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.14.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.14.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.14.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.14.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.14.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.14.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.14.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.14.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.14.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.14.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.14.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.14.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.14.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.14.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.14.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.15.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.15.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.15.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.15.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.15.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.15.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.15.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.15.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.15.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.15.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.15.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.15.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.15.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.15.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.15.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.15.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.15.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.15.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.15.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.15.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.16.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.16.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.16.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.16.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.16.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.16.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.16.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.16.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.16.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.16.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.16.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.16.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.16.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.16.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.16.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.16.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.16.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.16.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.16.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.16.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.17.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.17.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.17.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.17.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.17.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.17.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.17.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.17.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.17.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.17.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.17.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.17.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.17.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.17.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.17.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.17.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.17.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.17.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.17.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.17.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.18.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.18.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.18.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.18.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.18.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.18.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.18.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.18.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.18.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.18.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.18.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.18.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.18.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.18.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.18.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.18.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.18.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.18.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.18.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.18.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.19.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.19.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.19.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.19.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.19.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.19.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.19.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.19.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.19.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.19.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.19.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.19.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.19.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.19.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.19.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.19.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.19.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.19.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.19.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.19.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.20.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.20.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.20.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.20.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.20.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.20.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.20.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.20.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.20.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.20.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.20.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.20.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.20.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.20.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.20.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.20.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.20.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.20.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.20.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.20.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.21.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.21.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.21.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.21.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.21.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.21.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.21.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.21.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.21.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.21.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.21.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.21.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.21.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.21.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.21.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.21.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.21.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.21.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.21.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.21.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.22.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.22.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.22.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.22.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.22.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.22.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.22.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.22.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.22.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.22.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.22.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.22.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.22.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.22.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.22.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.22.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.22.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer3.22.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.22.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer3.22.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.conv2.weight_diff - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.0.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.0.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.0.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.0.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.0.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.1.conv2.weight_diff - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.1.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.1.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.1.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.1.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.1.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.1.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.1.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.1.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.1.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.1.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.1.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.2.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.2.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.2.conv2.weight_diff - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.2.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.2.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.2.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.2.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.2.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.2.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.2.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.2.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.2.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.2.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.2.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.2.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in DetectoRS_ResNet  

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.lateral_convs.0.conv.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.lateral_convs.1.conv.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.lateral_convs.2.conv.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.lateral_convs.3.conv.weight - torch.Size([256, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.lateral_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.conv1.weight - torch.Size([64, 3, 7, 7]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer1.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.1.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer1.2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer1.2.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.bn3.weight - torch.Size([256]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer1.2.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.conv2.weight_diff - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.0.conv2.switch.weight - torch.Size([1, 128, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.conv2.pre_context.weight - torch.Size([128, 128, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.conv2.pre_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.0.conv2.post_context.weight - torch.Size([128, 128, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.conv2.post_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.0.conv2.offset_s.weight - torch.Size([18, 128, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.0.conv2.offset_l.weight - torch.Size([18, 128, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.0.rfp_conv.weight - torch.Size([512, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.0.rfp_conv.bias - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.conv2.weight_diff - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.1.conv2.switch.weight - torch.Size([1, 128, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.conv2.pre_context.weight - torch.Size([128, 128, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.conv2.pre_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.1.conv2.post_context.weight - torch.Size([128, 128, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.conv2.post_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.1.conv2.offset_s.weight - torch.Size([18, 128, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.1.conv2.offset_l.weight - torch.Size([18, 128, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.1.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.conv2.weight_diff - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.2.conv2.switch.weight - torch.Size([1, 128, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.conv2.pre_context.weight - torch.Size([128, 128, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.conv2.pre_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.2.conv2.post_context.weight - torch.Size([128, 128, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.conv2.post_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.2.conv2.offset_s.weight - torch.Size([18, 128, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.2.conv2.offset_l.weight - torch.Size([18, 128, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.2.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.2.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.2.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.3.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.conv2.weight_diff - torch.Size([128, 128, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.3.conv2.switch.weight - torch.Size([1, 128, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.conv2.pre_context.weight - torch.Size([128, 128, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.conv2.pre_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.3.conv2.post_context.weight - torch.Size([128, 128, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.conv2.post_context.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.3.conv2.offset_s.weight - torch.Size([18, 128, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.3.conv2.offset_l.weight - torch.Size([18, 128, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.3.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.3.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.bn3.weight - torch.Size([512]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer2.3.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.0.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.0.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.0.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.0.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.downsample.1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.0.downsample.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.0.rfp_conv.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.0.rfp_conv.bias - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.1.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.1.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.1.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.1.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.1.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.2.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.2.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.2.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.2.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.2.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.2.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.2.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.2.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.3.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.3.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.3.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.3.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.3.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.3.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.3.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.3.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.4.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.4.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.4.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.4.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.4.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.4.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.4.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.4.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.5.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.5.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.5.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.5.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.5.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.5.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.5.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.5.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.6.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.6.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.6.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.6.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.6.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.6.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.6.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.6.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.6.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.6.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.6.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.6.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.6.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.6.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.6.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.6.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.6.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.6.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.6.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.6.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.7.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.7.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.7.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.7.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.7.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.7.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.7.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.7.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.7.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.7.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.7.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.7.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.7.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.7.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.7.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.7.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.7.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.7.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.7.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.7.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.8.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.8.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.8.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.8.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.8.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.8.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.8.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.8.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.8.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.8.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.8.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.8.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.8.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.8.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.8.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.8.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.8.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.8.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.8.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.8.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.9.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.9.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.9.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.9.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.9.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.9.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.9.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.9.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.9.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.9.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.9.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.9.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.9.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.9.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.9.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.9.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.9.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.9.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.9.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.9.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.10.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.10.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.10.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.10.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.10.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.10.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.10.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.10.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.10.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.10.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.10.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.10.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.10.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.10.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.10.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.10.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.10.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.10.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.10.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.10.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.11.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.11.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.11.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.11.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.11.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.11.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.11.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.11.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.11.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.11.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.11.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.11.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.11.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.11.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.11.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.11.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.11.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.11.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.11.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.11.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.12.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.12.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.12.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.12.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.12.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.12.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.12.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.12.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.12.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.12.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.12.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.12.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.12.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.12.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.12.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.12.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.12.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.12.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.12.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.12.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.13.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.13.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.13.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.13.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.13.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.13.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.13.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.13.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.13.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.13.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.13.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.13.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.13.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.13.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.13.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.13.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.13.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.13.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.13.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.13.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.14.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.14.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.14.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.14.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.14.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.14.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.14.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.14.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.14.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.14.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.14.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.14.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.14.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.14.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.14.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.14.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.14.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.14.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.14.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.14.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.15.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.15.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.15.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.15.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.15.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.15.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.15.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.15.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.15.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.15.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.15.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.15.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.15.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.15.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.15.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.15.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.15.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.15.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.15.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.15.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.16.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.16.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.16.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.16.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.16.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.16.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.16.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.16.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.16.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.16.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.16.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.16.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.16.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.16.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.16.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.16.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.16.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.16.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.16.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.16.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.17.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.17.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.17.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.17.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.17.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.17.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.17.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.17.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.17.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.17.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.17.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.17.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.17.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.17.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.17.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.17.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.17.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.17.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.17.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.17.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.18.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.18.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.18.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.18.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.18.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.18.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.18.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.18.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.18.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.18.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.18.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.18.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.18.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.18.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.18.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.18.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.18.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.18.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.18.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.18.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.19.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.19.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.19.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.19.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.19.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.19.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.19.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.19.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.19.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.19.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.19.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.19.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.19.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.19.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.19.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.19.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.19.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.19.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.19.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.19.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.20.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.20.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.20.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.20.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.20.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.20.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.20.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.20.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.20.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.20.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.20.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.20.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.20.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.20.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.20.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.20.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.20.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.20.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.20.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.20.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.21.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.21.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.21.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.21.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.21.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.21.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.21.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.21.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.21.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.21.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.21.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.21.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.21.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.21.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.21.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.21.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.21.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.21.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.21.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.21.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.22.conv1.weight - torch.Size([256, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.22.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.22.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.22.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.22.conv2.weight_diff - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.22.conv2.switch.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.22.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.22.conv2.pre_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.22.conv2.pre_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.22.conv2.post_context.weight - torch.Size([256, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.22.conv2.post_context.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.22.conv2.offset_s.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.22.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.22.conv2.offset_l.weight - torch.Size([18, 256, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.22.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.22.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.22.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer3.22.conv3.weight - torch.Size([1024, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.22.bn3.weight - torch.Size([1024]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer3.22.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.conv2.weight_diff - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.0.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.0.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.0.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.0.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.0.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.downsample.1.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.0.downsample.1.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.0.rfp_conv.weight - torch.Size([2048, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.0.rfp_conv.bias - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.conv2.weight_diff - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.1.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.1.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.1.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.1.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.1.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.1.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.2.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.conv2.weight_diff - torch.Size([512, 512, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.2.conv2.switch.weight - torch.Size([1, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.conv2.switch.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.conv2.pre_context.weight - torch.Size([512, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.conv2.pre_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.2.conv2.post_context.weight - torch.Size([512, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.conv2.post_context.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.2.conv2.offset_s.weight - torch.Size([18, 512, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.conv2.offset_s.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.2.conv2.offset_l.weight - torch.Size([18, 512, 3, 3]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.conv2.offset_l.bias - torch.Size([18]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.2.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.2.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_modules.0.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.bn3.weight - torch.Size([2048]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_modules.0.layer4.2.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_aspp.aspp.0.weight - torch.Size([64, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_aspp.aspp.0.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_aspp.aspp.1.weight - torch.Size([64, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_aspp.aspp.1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_aspp.aspp.2.weight - torch.Size([64, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_aspp.aspp.2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_aspp.aspp.3.weight - torch.Size([64, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_aspp.aspp.3.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

neck.rfp_weight.weight - torch.Size([1, 256, 1, 1]): 
Initialized by user-defined `init_weights` in RFP  

neck.rfp_weight.bias - torch.Size([1]): 
Initialized by user-defined `init_weights` in RFP  

rpn_head.rpn_conv.weight - torch.Size([256, 256, 3, 3]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_conv.bias - torch.Size([256]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.weight - torch.Size([4, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_cls.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.weight - torch.Size([16, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

rpn_head.rpn_reg.bias - torch.Size([16]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_cls.weight - torch.Size([2, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_cls.bias - torch.Size([2]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.0.fc_reg.weight - torch.Size([4, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.0.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.0.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.0.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.0.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.0.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.1.fc_cls.weight - torch.Size([2, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.1.fc_cls.bias - torch.Size([2]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.1.fc_reg.weight - torch.Size([4, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.1.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.1.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.1.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.1.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.1.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.2.fc_cls.weight - torch.Size([2, 1024]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.2.fc_cls.bias - torch.Size([2]): 
NormalInit: mean=0, std=0.01, bias=0 

roi_head.bbox_head.2.fc_reg.weight - torch.Size([4, 1024]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.2.fc_reg.bias - torch.Size([4]): 
NormalInit: mean=0, std=0.001, bias=0 

roi_head.bbox_head.2.shared_fcs.0.weight - torch.Size([1024, 12544]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.2.shared_fcs.0.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.2.shared_fcs.1.weight - torch.Size([1024, 1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.bbox_head.2.shared_fcs.1.bias - torch.Size([1024]): 
XavierInit: gain=1, distribution=uniform, bias=0 

roi_head.mask_head.0.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

roi_head.mask_head.0.convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

roi_head.mask_head.0.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

roi_head.mask_head.0.convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

roi_head.mask_head.0.convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

roi_head.mask_head.0.convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

roi_head.mask_head.0.convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

roi_head.mask_head.0.convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

roi_head.mask_head.0.upsample.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

roi_head.mask_head.0.upsample.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

roi_head.mask_head.0.conv_logits.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

roi_head.mask_head.0.conv_logits.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

roi_head.mask_head.1.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

roi_head.mask_head.1.convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

roi_head.mask_head.1.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

roi_head.mask_head.1.convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

roi_head.mask_head.1.convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

roi_head.mask_head.1.convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

roi_head.mask_head.1.convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

roi_head.mask_head.1.convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

roi_head.mask_head.1.upsample.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

roi_head.mask_head.1.upsample.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

roi_head.mask_head.1.conv_logits.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

roi_head.mask_head.1.conv_logits.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

roi_head.mask_head.1.conv_res.conv.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

roi_head.mask_head.1.conv_res.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

roi_head.mask_head.2.convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

roi_head.mask_head.2.convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

roi_head.mask_head.2.convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

roi_head.mask_head.2.convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

roi_head.mask_head.2.convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

roi_head.mask_head.2.convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

roi_head.mask_head.2.convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

roi_head.mask_head.2.convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

roi_head.mask_head.2.upsample.weight - torch.Size([256, 256, 2, 2]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

roi_head.mask_head.2.upsample.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

roi_head.mask_head.2.conv_logits.weight - torch.Size([1, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

roi_head.mask_head.2.conv_logits.bias - torch.Size([1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

roi_head.mask_head.2.conv_res.conv.weight - torch.Size([256, 256, 1, 1]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  

roi_head.mask_head.2.conv_res.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of HybridTaskCascade  
2023-06-30 11:10:16,950 - mmdet - INFO - Automatic scaling of learning rate (LR) has been disabled.
2023-06-30 11:10:16,981 - mmdet - INFO - load checkpoint from http path: https://download.openmmlab.com/mmdetection/v2.0/detectors/detectors_htc_r101_20e_coco/detectors_htc_r101_20e_coco_20210419_203638-348d533b.pth
2023-06-30 11:10:17,569 - mmdet - WARNING - The model and loaded state dict do not match exactly

size mismatch for rpn_head.rpn_cls.weight: copying a param with shape torch.Size([3, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([4, 256, 1, 1]).
size mismatch for rpn_head.rpn_cls.bias: copying a param with shape torch.Size([3]) from checkpoint, the shape in current model is torch.Size([4]).
size mismatch for rpn_head.rpn_reg.weight: copying a param with shape torch.Size([12, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([16, 256, 1, 1]).
size mismatch for rpn_head.rpn_reg.bias: copying a param with shape torch.Size([12]) from checkpoint, the shape in current model is torch.Size([16]).
size mismatch for roi_head.bbox_head.0.fc_cls.weight: copying a param with shape torch.Size([81, 1024]) from checkpoint, the shape in current model is torch.Size([2, 1024]).
size mismatch for roi_head.bbox_head.0.fc_cls.bias: copying a param with shape torch.Size([81]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.bbox_head.1.fc_cls.weight: copying a param with shape torch.Size([81, 1024]) from checkpoint, the shape in current model is torch.Size([2, 1024]).
size mismatch for roi_head.bbox_head.1.fc_cls.bias: copying a param with shape torch.Size([81]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.bbox_head.2.fc_cls.weight: copying a param with shape torch.Size([81, 1024]) from checkpoint, the shape in current model is torch.Size([2, 1024]).
size mismatch for roi_head.bbox_head.2.fc_cls.bias: copying a param with shape torch.Size([81]) from checkpoint, the shape in current model is torch.Size([2]).
size mismatch for roi_head.mask_head.0.conv_logits.weight: copying a param with shape torch.Size([80, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([1, 256, 1, 1]).
size mismatch for roi_head.mask_head.0.conv_logits.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([1]).
size mismatch for roi_head.mask_head.1.conv_logits.weight: copying a param with shape torch.Size([80, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([1, 256, 1, 1]).
size mismatch for roi_head.mask_head.1.conv_logits.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([1]).
size mismatch for roi_head.mask_head.2.conv_logits.weight: copying a param with shape torch.Size([80, 256, 1, 1]) from checkpoint, the shape in current model is torch.Size([1, 256, 1, 1]).
size mismatch for roi_head.mask_head.2.conv_logits.bias: copying a param with shape torch.Size([80]) from checkpoint, the shape in current model is torch.Size([1]).
unexpected key in source state_dict: roi_head.semantic_head.lateral_convs.0.conv.weight, roi_head.semantic_head.lateral_convs.0.conv.bias, roi_head.semantic_head.lateral_convs.1.conv.weight, roi_head.semantic_head.lateral_convs.1.conv.bias, roi_head.semantic_head.lateral_convs.2.conv.weight, roi_head.semantic_head.lateral_convs.2.conv.bias, roi_head.semantic_head.lateral_convs.3.conv.weight, roi_head.semantic_head.lateral_convs.3.conv.bias, roi_head.semantic_head.lateral_convs.4.conv.weight, roi_head.semantic_head.lateral_convs.4.conv.bias, roi_head.semantic_head.convs.0.conv.weight, roi_head.semantic_head.convs.0.conv.bias, roi_head.semantic_head.convs.1.conv.weight, roi_head.semantic_head.convs.1.conv.bias, roi_head.semantic_head.convs.2.conv.weight, roi_head.semantic_head.convs.2.conv.bias, roi_head.semantic_head.convs.3.conv.weight, roi_head.semantic_head.convs.3.conv.bias, roi_head.semantic_head.conv_embedding.conv.weight, roi_head.semantic_head.conv_embedding.conv.bias, roi_head.semantic_head.conv_logits.weight, roi_head.semantic_head.conv_logits.bias

2023-06-30 11:10:17,575 - mmdet - INFO - Start running, host: tungnx@ictserver10, work_dir: /storage/tungnx/mmdetection-2.26.0/work_dirs/hubmap/1class_ds1/detectors_res2net101/fold0/2048
2023-06-30 11:10:17,575 - mmdet - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(ABOVE_NORMAL) Fp16OptimizerHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) CosineAnnealingLrUpdaterHook       
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) Fp16OptimizerHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-06-30 11:10:17,576 - mmdet - INFO - workflow: [('train', 1)], max: 20 epochs
2023-06-30 11:10:17,578 - mmdet - INFO - Checkpoints will be saved to /storage/tungnx/mmdetection-2.26.0/work_dirs/hubmap/1class_ds1/detectors_res2net101/fold0/2048 by HardDiskBackend.
2023-06-30 11:11:45,268 - mmdet - INFO - Epoch [1][40/166]	lr: 1.952e-05, eta: 1:59:50, time: 2.192, data_time: 0.130, memory: 18174, loss_rpn_cls: 0.5460, loss_rpn_bbox: 0.1799, s0.loss_cls: 0.2091, s0.acc: 97.3462, s0.loss_bbox: 0.0340, s0.loss_mask: 0.6865, s1.loss_cls: 0.1127, s1.acc: 96.5015, s1.loss_bbox: 0.0075, s1.loss_mask: 0.3986, s2.loss_cls: 0.0429, s2.acc: 98.2886, s2.loss_bbox: 0.0015, s2.loss_mask: 0.1949, loss: 2.4135
2023-06-30 11:13:10,547 - mmdet - INFO - Epoch [1][80/166]	lr: 3.946e-05, eta: 1:56:45, time: 2.132, data_time: 0.051, memory: 18445, loss_rpn_cls: 0.1395, loss_rpn_bbox: 0.1007, s0.loss_cls: 0.1579, s0.acc: 95.7275, s0.loss_bbox: 0.0761, s0.loss_mask: 0.6059, s1.loss_cls: 0.0548, s1.acc: 97.3779, s1.loss_bbox: 0.0106, s1.loss_mask: 0.3276, s2.loss_cls: 0.0204, s2.acc: 98.2153, s2.loss_bbox: 0.0009, s2.loss_mask: 0.1542, loss: 1.6486
2023-06-30 11:14:36,403 - mmdet - INFO - Epoch [1][120/166]	lr: 4.984e-05, eta: 1:55:01, time: 2.146, data_time: 0.056, memory: 19524, loss_rpn_cls: 0.1205, loss_rpn_bbox: 0.1069, s0.loss_cls: 0.1543, s0.acc: 94.7388, s0.loss_bbox: 0.0758, s0.loss_mask: 0.3432, s1.loss_cls: 0.0717, s1.acc: 94.9878, s1.loss_bbox: 0.0216, s1.loss_mask: 0.1647, s2.loss_cls: 0.0312, s2.acc: 96.0718, s2.loss_bbox: 0.0039, s2.loss_mask: 0.0845, loss: 1.1784
2023-06-30 11:16:01,699 - mmdet - INFO - Epoch [1][160/166]	lr: 4.972e-05, eta: 1:53:16, time: 2.132, data_time: 0.054, memory: 19646, loss_rpn_cls: 0.0948, loss_rpn_bbox: 0.1006, s0.loss_cls: 0.2058, s0.acc: 92.0142, s0.loss_bbox: 0.1339, s0.loss_mask: 0.3047, s1.loss_cls: 0.0989, s1.acc: 91.5674, s1.loss_bbox: 0.0387, s1.loss_mask: 0.1464, s2.loss_cls: 0.0428, s2.acc: 93.3911, s2.loss_bbox: 0.0075, s2.loss_mask: 0.0731, loss: 1.2472
2023-06-30 11:17:14,862 - mmdet - INFO - Evaluating segm...
2023-06-30 11:17:15,625 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.258
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.496
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.250
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.174
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.293
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.394
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.477
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.477
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.477
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.368
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.531
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.547

2023-06-30 11:17:39,143 - mmdet - INFO - Now best checkpoint is saved as best_segm_mAP_epoch_1.pth.
2023-06-30 11:17:39,143 - mmdet - INFO - Best segm_mAP is 0.2580 at 1 epoch.
2023-06-30 11:17:39,143 - mmdet - INFO - Exp name: custom_config_ds12_fold0.py
2023-06-30 11:17:39,143 - mmdet - INFO - Epoch(val) [1][84]	segm_mAP: 0.2580, segm_mAP_50: 0.4960, segm_mAP_75: 0.2500, segm_mAP_s: 0.1740, segm_mAP_m: 0.2930, segm_mAP_l: 0.3940, segm_mAP_copypaste: 0.258 0.496 0.250 0.174 0.293 0.394
2023-06-30 11:19:07,611 - mmdet - INFO - Epoch [2][40/166]	lr: 4.953e-05, eta: 1:48:58, time: 2.211, data_time: 0.140, memory: 19646, loss_rpn_cls: 0.0719, loss_rpn_bbox: 0.0865, s0.loss_cls: 0.1951, s0.acc: 92.3364, s0.loss_bbox: 0.1390, s0.loss_mask: 0.2759, s1.loss_cls: 0.0986, s1.acc: 91.7206, s1.loss_bbox: 0.0449, s1.loss_mask: 0.1307, s2.loss_cls: 0.0456, s2.acc: 92.2577, s2.loss_bbox: 0.0100, s2.loss_mask: 0.0650, loss: 1.1632
2023-06-30 11:20:34,763 - mmdet - INFO - Epoch [2][80/166]	lr: 4.933e-05, eta: 1:48:14, time: 2.179, data_time: 0.061, memory: 19702, loss_rpn_cls: 0.0475, loss_rpn_bbox: 0.0712, s0.loss_cls: 0.1880, s0.acc: 92.5024, s0.loss_bbox: 0.1418, s0.loss_mask: 0.2527, s1.loss_cls: 0.1023, s1.acc: 91.3618, s1.loss_bbox: 0.0467, s1.loss_mask: 0.1223, s2.loss_cls: 0.0479, s2.acc: 91.9495, s2.loss_bbox: 0.0110, s2.loss_mask: 0.0607, loss: 1.0920
2023-06-30 11:21:59,185 - mmdet - INFO - Epoch [2][120/166]	lr: 4.910e-05, eta: 1:46:49, time: 2.111, data_time: 0.044, memory: 19702, loss_rpn_cls: 0.0455, loss_rpn_bbox: 0.0559, s0.loss_cls: 0.1711, s0.acc: 93.3276, s0.loss_bbox: 0.1226, s0.loss_mask: 0.2643, s1.loss_cls: 0.0897, s1.acc: 92.4721, s1.loss_bbox: 0.0407, s1.loss_mask: 0.1316, s2.loss_cls: 0.0420, s2.acc: 92.8101, s2.loss_bbox: 0.0092, s2.loss_mask: 0.0647, loss: 1.0373
2023-06-30 11:23:24,456 - mmdet - INFO - Epoch [2][160/166]	lr: 4.883e-05, eta: 1:45:31, time: 2.132, data_time: 0.052, memory: 19969, loss_rpn_cls: 0.0487, loss_rpn_bbox: 0.0649, s0.loss_cls: 0.1747, s0.acc: 93.0542, s0.loss_bbox: 0.1244, s0.loss_mask: 0.2566, s1.loss_cls: 0.0895, s1.acc: 92.6390, s1.loss_bbox: 0.0422, s1.loss_mask: 0.1260, s2.loss_cls: 0.0418, s2.acc: 92.8575, s2.loss_bbox: 0.0096, s2.loss_mask: 0.0611, loss: 1.0396
2023-06-30 11:24:36,873 - mmdet - INFO - Evaluating segm...
2023-06-30 11:24:37,600 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.345
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.649
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.336
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.208
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.418
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.490
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.527
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.527
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.527
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.440
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.578
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.539

2023-06-30 11:24:38,085 - mmdet - INFO - The previous best checkpoint /storage/tungnx/mmdetection-2.26.0/work_dirs/hubmap/1class_ds1/detectors_res2net101/fold0/2048/best_segm_mAP_epoch_1.pth was removed
2023-06-30 11:25:01,492 - mmdet - INFO - Now best checkpoint is saved as best_segm_mAP_epoch_2.pth.
2023-06-30 11:25:01,493 - mmdet - INFO - Best segm_mAP is 0.3450 at 2 epoch.
2023-06-30 11:25:01,493 - mmdet - INFO - Exp name: custom_config_ds12_fold0.py
2023-06-30 11:25:01,494 - mmdet - INFO - Epoch(val) [2][84]	segm_mAP: 0.3450, segm_mAP_50: 0.6490, segm_mAP_75: 0.3360, segm_mAP_s: 0.2080, segm_mAP_m: 0.4180, segm_mAP_l: 0.4900, segm_mAP_copypaste: 0.345 0.649 0.336 0.208 0.418 0.490
2023-06-30 11:26:28,868 - mmdet - INFO - Epoch [3][40/166]	lr: 4.848e-05, eta: 1:42:35, time: 2.184, data_time: 0.131, memory: 19969, loss_rpn_cls: 0.0503, loss_rpn_bbox: 0.0684, s0.loss_cls: 0.1639, s0.acc: 93.6060, s0.loss_bbox: 0.1189, s0.loss_mask: 0.2401, s1.loss_cls: 0.0852, s1.acc: 93.0086, s1.loss_bbox: 0.0438, s1.loss_mask: 0.1150, s2.loss_cls: 0.0430, s2.acc: 92.4837, s2.loss_bbox: 0.0112, s2.loss_mask: 0.0576, loss: 0.9975
2023-06-30 11:27:54,474 - mmdet - INFO - Epoch [3][80/166]	lr: 4.813e-05, eta: 1:41:26, time: 2.140, data_time: 0.049, memory: 19969, loss_rpn_cls: 0.0430, loss_rpn_bbox: 0.0615, s0.loss_cls: 0.1753, s0.acc: 92.9248, s0.loss_bbox: 0.1339, s0.loss_mask: 0.2356, s1.loss_cls: 0.0924, s1.acc: 92.1443, s1.loss_bbox: 0.0467, s1.loss_mask: 0.1145, s2.loss_cls: 0.0454, s2.acc: 91.9438, s2.loss_bbox: 0.0115, s2.loss_mask: 0.0564, loss: 1.0161
2023-06-30 11:29:20,976 - mmdet - INFO - Epoch [3][120/166]	lr: 4.776e-05, eta: 1:40:20, time: 2.163, data_time: 0.058, memory: 19981, loss_rpn_cls: 0.0412, loss_rpn_bbox: 0.0615, s0.loss_cls: 0.1747, s0.acc: 93.2080, s0.loss_bbox: 0.1290, s0.loss_mask: 0.2476, s1.loss_cls: 0.0952, s1.acc: 92.2525, s1.loss_bbox: 0.0473, s1.loss_mask: 0.1205, s2.loss_cls: 0.0466, s2.acc: 91.9568, s2.loss_bbox: 0.0112, s2.loss_mask: 0.0588, loss: 1.0336
2023-06-30 11:30:47,612 - mmdet - INFO - Epoch [3][160/166]	lr: 4.735e-05, eta: 1:39:12, time: 2.166, data_time: 0.053, memory: 19981, loss_rpn_cls: 0.0396, loss_rpn_bbox: 0.0613, s0.loss_cls: 0.1809, s0.acc: 92.9688, s0.loss_bbox: 0.1316, s0.loss_mask: 0.2364, s1.loss_cls: 0.0932, s1.acc: 92.3846, s1.loss_bbox: 0.0454, s1.loss_mask: 0.1162, s2.loss_cls: 0.0465, s2.acc: 91.7329, s2.loss_bbox: 0.0115, s2.loss_mask: 0.0575, loss: 1.0200
2023-06-30 11:31:59,797 - mmdet - INFO - Evaluating segm...
2023-06-30 11:32:00,589 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.365
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.670
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.364
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.222
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.419
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.533
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.537
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.537
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.537
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.465
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.572
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.586

2023-06-30 11:32:01,057 - mmdet - INFO - The previous best checkpoint /storage/tungnx/mmdetection-2.26.0/work_dirs/hubmap/1class_ds1/detectors_res2net101/fold0/2048/best_segm_mAP_epoch_2.pth was removed
2023-06-30 11:32:23,867 - mmdet - INFO - Now best checkpoint is saved as best_segm_mAP_epoch_3.pth.
2023-06-30 11:32:23,867 - mmdet - INFO - Best segm_mAP is 0.3650 at 3 epoch.
2023-06-30 11:32:23,867 - mmdet - INFO - Exp name: custom_config_ds12_fold0.py
2023-06-30 11:32:23,868 - mmdet - INFO - Epoch(val) [3][84]	segm_mAP: 0.3650, segm_mAP_50: 0.6700, segm_mAP_75: 0.3640, segm_mAP_s: 0.2220, segm_mAP_m: 0.4190, segm_mAP_l: 0.5330, segm_mAP_copypaste: 0.365 0.670 0.364 0.222 0.419 0.533
2023-06-30 11:33:52,539 - mmdet - INFO - Epoch [4][40/166]	lr: 4.684e-05, eta: 1:36:53, time: 2.217, data_time: 0.142, memory: 20018, loss_rpn_cls: 0.0420, loss_rpn_bbox: 0.0554, s0.loss_cls: 0.1593, s0.acc: 93.6133, s0.loss_bbox: 0.1214, s0.loss_mask: 0.2377, s1.loss_cls: 0.0852, s1.acc: 93.0990, s1.loss_bbox: 0.0464, s1.loss_mask: 0.1153, s2.loss_cls: 0.0446, s2.acc: 92.4683, s2.loss_bbox: 0.0129, s2.loss_mask: 0.0555, loss: 0.9756
2023-06-30 11:35:18,505 - mmdet - INFO - Epoch [4][80/166]	lr: 4.637e-05, eta: 1:35:40, time: 2.149, data_time: 0.053, memory: 20018, loss_rpn_cls: 0.0332, loss_rpn_bbox: 0.0536, s0.loss_cls: 0.1624, s0.acc: 93.7183, s0.loss_bbox: 0.1204, s0.loss_mask: 0.2457, s1.loss_cls: 0.0862, s1.acc: 93.0677, s1.loss_bbox: 0.0433, s1.loss_mask: 0.1173, s2.loss_cls: 0.0425, s2.acc: 92.9197, s2.loss_bbox: 0.0107, s2.loss_mask: 0.0567, loss: 0.9722
2023-06-30 11:36:45,686 - mmdet - INFO - Epoch [4][120/166]	lr: 4.586e-05, eta: 1:34:32, time: 2.180, data_time: 0.049, memory: 20018, loss_rpn_cls: 0.0330, loss_rpn_bbox: 0.0605, s0.loss_cls: 0.1718, s0.acc: 92.9614, s0.loss_bbox: 0.1226, s0.loss_mask: 0.2336, s1.loss_cls: 0.0929, s1.acc: 92.1562, s1.loss_bbox: 0.0462, s1.loss_mask: 0.1144, s2.loss_cls: 0.0472, s2.acc: 91.2698, s2.loss_bbox: 0.0129, s2.loss_mask: 0.0566, loss: 0.9917
2023-06-30 11:38:11,784 - mmdet - INFO - Epoch [4][160/166]	lr: 4.532e-05, eta: 1:33:16, time: 2.152, data_time: 0.055, memory: 20018, loss_rpn_cls: 0.0300, loss_rpn_bbox: 0.0569, s0.loss_cls: 0.1657, s0.acc: 93.3643, s0.loss_bbox: 0.1286, s0.loss_mask: 0.2399, s1.loss_cls: 0.0886, s1.acc: 92.5447, s1.loss_bbox: 0.0468, s1.loss_mask: 0.1169, s2.loss_cls: 0.0458, s2.acc: 91.8488, s2.loss_bbox: 0.0123, s2.loss_mask: 0.0561, loss: 0.9877
2023-06-30 11:39:24,416 - mmdet - INFO - Evaluating segm...
2023-06-30 11:39:25,128 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.380
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.698
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.366
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.225
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.440
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.560
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.547
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.547
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.547
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.479
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.579
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.602

2023-06-30 11:39:25,602 - mmdet - INFO - The previous best checkpoint /storage/tungnx/mmdetection-2.26.0/work_dirs/hubmap/1class_ds1/detectors_res2net101/fold0/2048/best_segm_mAP_epoch_3.pth was removed
2023-06-30 11:39:49,287 - mmdet - INFO - Now best checkpoint is saved as best_segm_mAP_epoch_4.pth.
2023-06-30 11:39:49,288 - mmdet - INFO - Best segm_mAP is 0.3800 at 4 epoch.
2023-06-30 11:39:49,288 - mmdet - INFO - Exp name: custom_config_ds12_fold0.py
2023-06-30 11:39:49,288 - mmdet - INFO - Epoch(val) [4][84]	segm_mAP: 0.3800, segm_mAP_50: 0.6980, segm_mAP_75: 0.3660, segm_mAP_s: 0.2250, segm_mAP_m: 0.4400, segm_mAP_l: 0.5600, segm_mAP_copypaste: 0.380 0.698 0.366 0.225 0.440 0.560
2023-06-30 11:41:16,967 - mmdet - INFO - Epoch [5][40/166]	lr: 4.467e-05, eta: 1:31:06, time: 2.192, data_time: 0.136, memory: 20018, loss_rpn_cls: 0.0441, loss_rpn_bbox: 0.0544, s0.loss_cls: 0.1567, s0.acc: 93.8110, s0.loss_bbox: 0.1208, s0.loss_mask: 0.2272, s1.loss_cls: 0.0803, s1.acc: 93.5040, s1.loss_bbox: 0.0448, s1.loss_mask: 0.1100, s2.loss_cls: 0.0426, s2.acc: 92.5873, s2.loss_bbox: 0.0131, s2.loss_mask: 0.0531, loss: 0.9470
2023-06-30 11:42:43,617 - mmdet - INFO - Epoch [5][80/166]	lr: 4.407e-05, eta: 1:29:53, time: 2.166, data_time: 0.061, memory: 20018, loss_rpn_cls: 0.0358, loss_rpn_bbox: 0.0530, s0.loss_cls: 0.1623, s0.acc: 93.4937, s0.loss_bbox: 0.1213, s0.loss_mask: 0.2297, s1.loss_cls: 0.0905, s1.acc: 92.5089, s1.loss_bbox: 0.0467, s1.loss_mask: 0.1094, s2.loss_cls: 0.0469, s2.acc: 91.4937, s2.loss_bbox: 0.0129, s2.loss_mask: 0.0530, loss: 0.9615
2023-06-30 11:44:11,087 - mmdet - INFO - Epoch [5][120/166]	lr: 4.345e-05, eta: 1:28:41, time: 2.187, data_time: 0.052, memory: 20018, loss_rpn_cls: 0.0340, loss_rpn_bbox: 0.0520, s0.loss_cls: 0.1633, s0.acc: 93.5229, s0.loss_bbox: 0.1148, s0.loss_mask: 0.2176, s1.loss_cls: 0.0860, s1.acc: 92.9309, s1.loss_bbox: 0.0429, s1.loss_mask: 0.1046, s2.loss_cls: 0.0445, s2.acc: 92.2368, s2.loss_bbox: 0.0117, s2.loss_mask: 0.0509, loss: 0.9224
2023-06-30 11:45:37,030 - mmdet - INFO - Epoch [5][160/166]	lr: 4.280e-05, eta: 1:27:23, time: 2.149, data_time: 0.048, memory: 20018, loss_rpn_cls: 0.0353, loss_rpn_bbox: 0.0471, s0.loss_cls: 0.1545, s0.acc: 94.0649, s0.loss_bbox: 0.1098, s0.loss_mask: 0.2255, s1.loss_cls: 0.0801, s1.acc: 93.6527, s1.loss_bbox: 0.0435, s1.loss_mask: 0.1096, s2.loss_cls: 0.0428, s2.acc: 92.8643, s2.loss_bbox: 0.0132, s2.loss_mask: 0.0545, loss: 0.9160
2023-06-30 11:46:49,623 - mmdet - INFO - Evaluating segm...
2023-06-30 11:46:50,345 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.395
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.730
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.375
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.250
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.472
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.553
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.553
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.553
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.553
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.476
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.590
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.612

2023-06-30 11:46:50,820 - mmdet - INFO - The previous best checkpoint /storage/tungnx/mmdetection-2.26.0/work_dirs/hubmap/1class_ds1/detectors_res2net101/fold0/2048/best_segm_mAP_epoch_4.pth was removed
2023-06-30 11:47:13,246 - mmdet - INFO - Now best checkpoint is saved as best_segm_mAP_epoch_5.pth.
2023-06-30 11:47:13,246 - mmdet - INFO - Best segm_mAP is 0.3950 at 5 epoch.
2023-06-30 11:47:13,247 - mmdet - INFO - Exp name: custom_config_ds12_fold0.py
2023-06-30 11:47:13,247 - mmdet - INFO - Epoch(val) [5][84]	segm_mAP: 0.3950, segm_mAP_50: 0.7300, segm_mAP_75: 0.3750, segm_mAP_s: 0.2500, segm_mAP_m: 0.4720, segm_mAP_l: 0.5530, segm_mAP_copypaste: 0.395 0.730 0.375 0.250 0.472 0.553
2023-06-30 11:48:41,087 - mmdet - INFO - Epoch [6][40/166]	lr: 4.201e-05, eta: 1:25:22, time: 2.196, data_time: 0.126, memory: 20019, loss_rpn_cls: 0.0271, loss_rpn_bbox: 0.0510, s0.loss_cls: 0.1505, s0.acc: 93.9917, s0.loss_bbox: 0.1134, s0.loss_mask: 0.2386, s1.loss_cls: 0.0801, s1.acc: 93.5420, s1.loss_bbox: 0.0435, s1.loss_mask: 0.1145, s2.loss_cls: 0.0434, s2.acc: 92.2232, s2.loss_bbox: 0.0132, s2.loss_mask: 0.0551, loss: 0.9303
2023-06-30 11:50:08,112 - mmdet - INFO - Epoch [6][80/166]	lr: 4.131e-05, eta: 1:24:07, time: 2.176, data_time: 0.063, memory: 20019, loss_rpn_cls: 0.0261, loss_rpn_bbox: 0.0487, s0.loss_cls: 0.1520, s0.acc: 94.0259, s0.loss_bbox: 0.1095, s0.loss_mask: 0.2219, s1.loss_cls: 0.0834, s1.acc: 92.9899, s1.loss_bbox: 0.0455, s1.loss_mask: 0.1097, s2.loss_cls: 0.0455, s2.acc: 91.8065, s2.loss_bbox: 0.0131, s2.loss_mask: 0.0536, loss: 0.9091
2023-06-30 11:51:35,798 - mmdet - INFO - Epoch [6][120/166]	lr: 4.058e-05, eta: 1:22:53, time: 2.192, data_time: 0.049, memory: 20019, loss_rpn_cls: 0.0250, loss_rpn_bbox: 0.0412, s0.loss_cls: 0.1547, s0.acc: 93.7085, s0.loss_bbox: 0.1153, s0.loss_mask: 0.2263, s1.loss_cls: 0.0835, s1.acc: 92.8213, s1.loss_bbox: 0.0455, s1.loss_mask: 0.1077, s2.loss_cls: 0.0439, s2.acc: 91.7360, s2.loss_bbox: 0.0123, s2.loss_mask: 0.0519, loss: 0.9073
2023-06-30 11:53:02,437 - mmdet - INFO - Epoch [6][160/166]	lr: 3.983e-05, eta: 1:21:36, time: 2.166, data_time: 0.061, memory: 20019, loss_rpn_cls: 0.0304, loss_rpn_bbox: 0.0512, s0.loss_cls: 0.1813, s0.acc: 92.8687, s0.loss_bbox: 0.1410, s0.loss_mask: 0.2231, s1.loss_cls: 0.0955, s1.acc: 92.4473, s1.loss_bbox: 0.0536, s1.loss_mask: 0.1096, s2.loss_cls: 0.0509, s2.acc: 91.0114, s2.loss_bbox: 0.0152, s2.loss_mask: 0.0530, loss: 1.0049
2023-06-30 11:54:15,302 - mmdet - INFO - Evaluating segm...
2023-06-30 11:54:16,017 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.400
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.743
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.391
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.254
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.459
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.544
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.549
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.549
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.549
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.477
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.588
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.571

2023-06-30 11:54:16,471 - mmdet - INFO - The previous best checkpoint /storage/tungnx/mmdetection-2.26.0/work_dirs/hubmap/1class_ds1/detectors_res2net101/fold0/2048/best_segm_mAP_epoch_5.pth was removed
2023-06-30 11:54:39,750 - mmdet - INFO - Now best checkpoint is saved as best_segm_mAP_epoch_6.pth.
2023-06-30 11:54:39,750 - mmdet - INFO - Best segm_mAP is 0.4000 at 6 epoch.
2023-06-30 11:54:39,750 - mmdet - INFO - Exp name: custom_config_ds12_fold0.py
2023-06-30 11:54:39,751 - mmdet - INFO - Epoch(val) [6][84]	segm_mAP: 0.4000, segm_mAP_50: 0.7430, segm_mAP_75: 0.3910, segm_mAP_s: 0.2540, segm_mAP_m: 0.4590, segm_mAP_l: 0.5440, segm_mAP_copypaste: 0.400 0.743 0.391 0.254 0.459 0.544
2023-06-30 11:56:08,459 - mmdet - INFO - Epoch [7][40/166]	lr: 3.894e-05, eta: 1:19:41, time: 2.217, data_time: 0.130, memory: 20019, loss_rpn_cls: 0.0258, loss_rpn_bbox: 0.0428, s0.loss_cls: 0.1552, s0.acc: 93.7183, s0.loss_bbox: 0.1134, s0.loss_mask: 0.2116, s1.loss_cls: 0.0829, s1.acc: 92.9083, s1.loss_bbox: 0.0453, s1.loss_mask: 0.1029, s2.loss_cls: 0.0443, s2.acc: 92.2796, s2.loss_bbox: 0.0142, s2.loss_mask: 0.0492, loss: 0.8875
2023-06-30 11:57:33,827 - mmdet - INFO - Epoch [7][80/166]	lr: 3.815e-05, eta: 1:18:21, time: 2.134, data_time: 0.049, memory: 20019, loss_rpn_cls: 0.0234, loss_rpn_bbox: 0.0490, s0.loss_cls: 0.1682, s0.acc: 93.2959, s0.loss_bbox: 0.1220, s0.loss_mask: 0.2287, s1.loss_cls: 0.0882, s1.acc: 92.9275, s1.loss_bbox: 0.0473, s1.loss_mask: 0.1106, s2.loss_cls: 0.0473, s2.acc: 91.8980, s2.loss_bbox: 0.0141, s2.loss_mask: 0.0536, loss: 0.9525
2023-06-30 11:58:59,950 - mmdet - INFO - Epoch [7][120/166]	lr: 3.733e-05, eta: 1:17:02, time: 2.153, data_time: 0.053, memory: 20019, loss_rpn_cls: 0.0297, loss_rpn_bbox: 0.0448, s0.loss_cls: 0.1485, s0.acc: 94.0674, s0.loss_bbox: 0.1046, s0.loss_mask: 0.2165, s1.loss_cls: 0.0810, s1.acc: 93.2453, s1.loss_bbox: 0.0425, s1.loss_mask: 0.1034, s2.loss_cls: 0.0435, s2.acc: 92.4453, s2.loss_bbox: 0.0128, s2.loss_mask: 0.0500, loss: 0.8773
2023-06-30 12:00:27,850 - mmdet - INFO - Epoch [7][160/166]	lr: 3.650e-05, eta: 1:15:45, time: 2.197, data_time: 0.055, memory: 20019, loss_rpn_cls: 0.0255, loss_rpn_bbox: 0.0476, s0.loss_cls: 0.1752, s0.acc: 93.1250, s0.loss_bbox: 0.1274, s0.loss_mask: 0.2140, s1.loss_cls: 0.0917, s1.acc: 92.5117, s1.loss_bbox: 0.0494, s1.loss_mask: 0.1044, s2.loss_cls: 0.0476, s2.acc: 92.1879, s2.loss_bbox: 0.0144, s2.loss_mask: 0.0509, loss: 0.9481
2023-06-30 12:01:39,927 - mmdet - INFO - Evaluating segm...
2023-06-30 12:01:40,705 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.408
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.742
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.403
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.256
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.462
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.574
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.571
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.571
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.571
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.502
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.604
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.621

2023-06-30 12:01:41,190 - mmdet - INFO - The previous best checkpoint /storage/tungnx/mmdetection-2.26.0/work_dirs/hubmap/1class_ds1/detectors_res2net101/fold0/2048/best_segm_mAP_epoch_6.pth was removed
2023-06-30 12:02:05,817 - mmdet - INFO - Now best checkpoint is saved as best_segm_mAP_epoch_7.pth.
2023-06-30 12:02:05,818 - mmdet - INFO - Best segm_mAP is 0.4080 at 7 epoch.
2023-06-30 12:02:05,818 - mmdet - INFO - Exp name: custom_config_ds12_fold0.py
2023-06-30 12:02:05,818 - mmdet - INFO - Epoch(val) [7][84]	segm_mAP: 0.4080, segm_mAP_50: 0.7420, segm_mAP_75: 0.4030, segm_mAP_s: 0.2560, segm_mAP_m: 0.4620, segm_mAP_l: 0.5740, segm_mAP_copypaste: 0.408 0.742 0.403 0.256 0.462 0.574
2023-06-30 12:03:35,076 - mmdet - INFO - Epoch [8][40/166]	lr: 3.552e-05, eta: 1:13:56, time: 2.231, data_time: 0.143, memory: 20021, loss_rpn_cls: 0.0233, loss_rpn_bbox: 0.0456, s0.loss_cls: 0.1598, s0.acc: 93.7524, s0.loss_bbox: 0.1187, s0.loss_mask: 0.2230, s1.loss_cls: 0.0857, s1.acc: 92.8917, s1.loss_bbox: 0.0454, s1.loss_mask: 0.1092, s2.loss_cls: 0.0452, s2.acc: 92.2242, s2.loss_bbox: 0.0143, s2.loss_mask: 0.0534, loss: 0.9237
2023-06-30 12:05:02,119 - mmdet - INFO - Epoch [8][80/166]	lr: 3.466e-05, eta: 1:12:37, time: 2.176, data_time: 0.047, memory: 20021, loss_rpn_cls: 0.0238, loss_rpn_bbox: 0.0425, s0.loss_cls: 0.1458, s0.acc: 94.0771, s0.loss_bbox: 0.1088, s0.loss_mask: 0.2120, s1.loss_cls: 0.0821, s1.acc: 93.2720, s1.loss_bbox: 0.0444, s1.loss_mask: 0.1040, s2.loss_cls: 0.0426, s2.acc: 92.4392, s2.loss_bbox: 0.0134, s2.loss_mask: 0.0505, loss: 0.8699
2023-06-30 12:06:27,943 - mmdet - INFO - Epoch [8][120/166]	lr: 3.378e-05, eta: 1:11:17, time: 2.146, data_time: 0.049, memory: 20021, loss_rpn_cls: 0.0262, loss_rpn_bbox: 0.0458, s0.loss_cls: 0.1468, s0.acc: 94.2432, s0.loss_bbox: 0.1065, s0.loss_mask: 0.2042, s1.loss_cls: 0.0752, s1.acc: 94.0966, s1.loss_bbox: 0.0414, s1.loss_mask: 0.0993, s2.loss_cls: 0.0400, s2.acc: 93.3278, s2.loss_bbox: 0.0125, s2.loss_mask: 0.0485, loss: 0.8464
2023-06-30 12:07:55,949 - mmdet - INFO - Epoch [8][160/166]	lr: 3.289e-05, eta: 1:09:59, time: 2.200, data_time: 0.058, memory: 20021, loss_rpn_cls: 0.0204, loss_rpn_bbox: 0.0441, s0.loss_cls: 0.1625, s0.acc: 93.3569, s0.loss_bbox: 0.1283, s0.loss_mask: 0.2138, s1.loss_cls: 0.0861, s1.acc: 92.8242, s1.loss_bbox: 0.0531, s1.loss_mask: 0.1046, s2.loss_cls: 0.0487, s2.acc: 91.4973, s2.loss_bbox: 0.0159, s2.loss_mask: 0.0501, loss: 0.9275
2023-06-30 12:09:07,293 - mmdet - INFO - Evaluating segm...
2023-06-30 12:09:07,940 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.412
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.752
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.403
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.259
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.470
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.594
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.567
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.567
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.567
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.500
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.596
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.630

2023-06-30 12:09:08,419 - mmdet - INFO - The previous best checkpoint /storage/tungnx/mmdetection-2.26.0/work_dirs/hubmap/1class_ds1/detectors_res2net101/fold0/2048/best_segm_mAP_epoch_7.pth was removed
2023-06-30 12:09:32,289 - mmdet - INFO - Now best checkpoint is saved as best_segm_mAP_epoch_8.pth.
2023-06-30 12:09:32,289 - mmdet - INFO - Best segm_mAP is 0.4120 at 8 epoch.
2023-06-30 12:09:32,289 - mmdet - INFO - Exp name: custom_config_ds12_fold0.py
2023-06-30 12:09:32,289 - mmdet - INFO - Epoch(val) [8][84]	segm_mAP: 0.4120, segm_mAP_50: 0.7520, segm_mAP_75: 0.4030, segm_mAP_s: 0.2590, segm_mAP_m: 0.4700, segm_mAP_l: 0.5940, segm_mAP_copypaste: 0.412 0.752 0.403 0.259 0.470 0.594
2023-06-30 12:11:00,784 - mmdet - INFO - Epoch [9][40/166]	lr: 3.185e-05, eta: 1:08:10, time: 2.212, data_time: 0.127, memory: 20021, loss_rpn_cls: 0.0222, loss_rpn_bbox: 0.0452, s0.loss_cls: 0.1464, s0.acc: 94.3579, s0.loss_bbox: 0.1077, s0.loss_mask: 0.2073, s1.loss_cls: 0.0785, s1.acc: 93.8664, s1.loss_bbox: 0.0427, s1.loss_mask: 0.1005, s2.loss_cls: 0.0419, s2.acc: 93.1818, s2.loss_bbox: 0.0143, s2.loss_mask: 0.0488, loss: 0.8555
2023-06-30 12:12:28,401 - mmdet - INFO - Epoch [9][80/166]	lr: 3.093e-05, eta: 1:06:52, time: 2.190, data_time: 0.060, memory: 20021, loss_rpn_cls: 0.0228, loss_rpn_bbox: 0.0428, s0.loss_cls: 0.1449, s0.acc: 94.1431, s0.loss_bbox: 0.1114, s0.loss_mask: 0.2025, s1.loss_cls: 0.0792, s1.acc: 93.2594, s1.loss_bbox: 0.0445, s1.loss_mask: 0.0987, s2.loss_cls: 0.0428, s2.acc: 92.3285, s2.loss_bbox: 0.0138, s2.loss_mask: 0.0475, loss: 0.8509
2023-06-30 12:13:55,176 - mmdet - INFO - Epoch [9][120/166]	lr: 3.001e-05, eta: 1:05:31, time: 2.169, data_time: 0.049, memory: 20021, loss_rpn_cls: 0.0240, loss_rpn_bbox: 0.0348, s0.loss_cls: 0.1474, s0.acc: 94.4189, s0.loss_bbox: 0.1026, s0.loss_mask: 0.2131, s1.loss_cls: 0.0769, s1.acc: 94.0415, s1.loss_bbox: 0.0416, s1.loss_mask: 0.1054, s2.loss_cls: 0.0425, s2.acc: 92.7805, s2.loss_bbox: 0.0133, s2.loss_mask: 0.0523, loss: 0.8541
2023-06-30 12:15:21,683 - mmdet - INFO - Epoch [9][160/166]	lr: 2.908e-05, eta: 1:04:11, time: 2.163, data_time: 0.056, memory: 20021, loss_rpn_cls: 0.0232, loss_rpn_bbox: 0.0435, s0.loss_cls: 0.1577, s0.acc: 93.6890, s0.loss_bbox: 0.1116, s0.loss_mask: 0.2087, s1.loss_cls: 0.0837, s1.acc: 93.1722, s1.loss_bbox: 0.0445, s1.loss_mask: 0.1010, s2.loss_cls: 0.0455, s2.acc: 92.0780, s2.loss_bbox: 0.0140, s2.loss_mask: 0.0489, loss: 0.8824
2023-06-30 12:16:33,776 - mmdet - INFO - Evaluating segm...
2023-06-30 12:16:34,547 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.412
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.734
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.414
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.264
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.464
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.574
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.562
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.562
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.562
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.483
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.599
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.621

2023-06-30 12:16:34,554 - mmdet - INFO - Exp name: custom_config_ds12_fold0.py
2023-06-30 12:16:34,554 - mmdet - INFO - Epoch(val) [9][84]	segm_mAP: 0.4120, segm_mAP_50: 0.7340, segm_mAP_75: 0.4140, segm_mAP_s: 0.2640, segm_mAP_m: 0.4640, segm_mAP_l: 0.5740, segm_mAP_copypaste: 0.412 0.734 0.414 0.264 0.464 0.574
2023-06-30 12:18:03,514 - mmdet - INFO - Epoch [10][40/166]	lr: 2.800e-05, eta: 1:02:25, time: 2.224, data_time: 0.128, memory: 20021, loss_rpn_cls: 0.0186, loss_rpn_bbox: 0.0408, s0.loss_cls: 0.1495, s0.acc: 94.2358, s0.loss_bbox: 0.1124, s0.loss_mask: 0.2121, s1.loss_cls: 0.0776, s1.acc: 93.9060, s1.loss_bbox: 0.0471, s1.loss_mask: 0.1036, s2.loss_cls: 0.0436, s2.acc: 92.5542, s2.loss_bbox: 0.0150, s2.loss_mask: 0.0501, loss: 0.8702
2023-06-30 12:19:30,088 - mmdet - INFO - Epoch [10][80/166]	lr: 2.706e-05, eta: 1:01:04, time: 2.164, data_time: 0.055, memory: 20021, loss_rpn_cls: 0.0195, loss_rpn_bbox: 0.0451, s0.loss_cls: 0.1502, s0.acc: 93.8843, s0.loss_bbox: 0.1130, s0.loss_mask: 0.2057, s1.loss_cls: 0.0785, s1.acc: 93.6031, s1.loss_bbox: 0.0446, s1.loss_mask: 0.0998, s2.loss_cls: 0.0429, s2.acc: 92.5987, s2.loss_bbox: 0.0139, s2.loss_mask: 0.0486, loss: 0.8616
2023-06-30 12:20:55,817 - mmdet - INFO - Epoch [10][120/166]	lr: 2.612e-05, eta: 0:59:42, time: 2.143, data_time: 0.048, memory: 20021, loss_rpn_cls: 0.0190, loss_rpn_bbox: 0.0316, s0.loss_cls: 0.1382, s0.acc: 94.5288, s0.loss_bbox: 0.0941, s0.loss_mask: 0.2035, s1.loss_cls: 0.0736, s1.acc: 94.1379, s1.loss_bbox: 0.0403, s1.loss_mask: 0.0995, s2.loss_cls: 0.0402, s2.acc: 93.2726, s2.loss_bbox: 0.0129, s2.loss_mask: 0.0472, loss: 0.8000
2023-06-30 12:22:21,632 - mmdet - INFO - Epoch [10][160/166]	lr: 2.517e-05, eta: 0:58:20, time: 2.145, data_time: 0.051, memory: 20021, loss_rpn_cls: 0.0251, loss_rpn_bbox: 0.0400, s0.loss_cls: 0.1395, s0.acc: 94.4922, s0.loss_bbox: 0.0999, s0.loss_mask: 0.2033, s1.loss_cls: 0.0733, s1.acc: 94.3012, s1.loss_bbox: 0.0433, s1.loss_mask: 0.0998, s2.loss_cls: 0.0414, s2.acc: 92.9498, s2.loss_bbox: 0.0142, s2.loss_mask: 0.0484, loss: 0.8282
2023-06-30 12:23:33,287 - mmdet - INFO - Evaluating segm...
2023-06-30 12:23:34,003 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.408
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.765
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.389
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.248
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.475
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.571
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.564
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.564
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.564
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.501
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.591
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.621

2023-06-30 12:23:34,010 - mmdet - INFO - Exp name: custom_config_ds12_fold0.py
2023-06-30 12:23:34,010 - mmdet - INFO - Epoch(val) [10][84]	segm_mAP: 0.4080, segm_mAP_50: 0.7650, segm_mAP_75: 0.3890, segm_mAP_s: 0.2480, segm_mAP_m: 0.4750, segm_mAP_l: 0.5710, segm_mAP_copypaste: 0.408 0.765 0.389 0.248 0.475 0.571
2023-06-30 12:25:03,199 - mmdet - INFO - Epoch [11][40/166]	lr: 2.408e-05, eta: 0:56:36, time: 2.229, data_time: 0.130, memory: 20021, loss_rpn_cls: 0.0199, loss_rpn_bbox: 0.0391, s0.loss_cls: 0.1311, s0.acc: 94.7827, s0.loss_bbox: 0.1037, s0.loss_mask: 0.2082, s1.loss_cls: 0.0671, s1.acc: 94.3316, s1.loss_bbox: 0.0431, s1.loss_mask: 0.1022, s2.loss_cls: 0.0380, s2.acc: 93.3983, s2.loss_bbox: 0.0139, s2.loss_mask: 0.0499, loss: 0.8163
2023-06-30 12:26:29,630 - mmdet - INFO - Epoch [11][80/166]	lr: 2.314e-05, eta: 0:55:14, time: 2.161, data_time: 0.061, memory: 20021, loss_rpn_cls: 0.0244, loss_rpn_bbox: 0.0414, s0.loss_cls: 0.1485, s0.acc: 93.8452, s0.loss_bbox: 0.1066, s0.loss_mask: 0.2203, s1.loss_cls: 0.0774, s1.acc: 93.5804, s1.loss_bbox: 0.0442, s1.loss_mask: 0.1084, s2.loss_cls: 0.0421, s2.acc: 92.7638, s2.loss_bbox: 0.0139, s2.loss_mask: 0.0538, loss: 0.8809
2023-06-30 12:27:54,536 - mmdet - INFO - Epoch [11][120/166]	lr: 2.220e-05, eta: 0:53:51, time: 2.123, data_time: 0.042, memory: 20021, loss_rpn_cls: 0.0194, loss_rpn_bbox: 0.0364, s0.loss_cls: 0.1406, s0.acc: 94.4824, s0.loss_bbox: 0.1016, s0.loss_mask: 0.1923, s1.loss_cls: 0.0729, s1.acc: 94.3144, s1.loss_bbox: 0.0430, s1.loss_mask: 0.0947, s2.loss_cls: 0.0393, s2.acc: 93.5340, s2.loss_bbox: 0.0136, s2.loss_mask: 0.0459, loss: 0.7997
2023-06-30 12:29:21,939 - mmdet - INFO - Epoch [11][160/166]	lr: 2.126e-05, eta: 0:52:30, time: 2.185, data_time: 0.050, memory: 20021, loss_rpn_cls: 0.0147, loss_rpn_bbox: 0.0296, s0.loss_cls: 0.1284, s0.acc: 94.8657, s0.loss_bbox: 0.0907, s0.loss_mask: 0.1997, s1.loss_cls: 0.0685, s1.acc: 94.7372, s1.loss_bbox: 0.0412, s1.loss_mask: 0.0988, s2.loss_cls: 0.0393, s2.acc: 93.4455, s2.loss_bbox: 0.0139, s2.loss_mask: 0.0471, loss: 0.7718
2023-06-30 12:30:34,190 - mmdet - INFO - Evaluating segm...
2023-06-30 12:30:34,875 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.416
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.771
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.395
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.262
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.479
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.584
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.562
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.562
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.562
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.500
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.590
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.612

2023-06-30 12:30:35,353 - mmdet - INFO - The previous best checkpoint /storage/tungnx/mmdetection-2.26.0/work_dirs/hubmap/1class_ds1/detectors_res2net101/fold0/2048/best_segm_mAP_epoch_8.pth was removed
2023-06-30 12:30:58,444 - mmdet - INFO - Now best checkpoint is saved as best_segm_mAP_epoch_11.pth.
2023-06-30 12:30:58,444 - mmdet - INFO - Best segm_mAP is 0.4160 at 11 epoch.
2023-06-30 12:30:58,445 - mmdet - INFO - Exp name: custom_config_ds12_fold0.py
2023-06-30 12:30:58,445 - mmdet - INFO - Epoch(val) [11][84]	segm_mAP: 0.4160, segm_mAP_50: 0.7710, segm_mAP_75: 0.3950, segm_mAP_s: 0.2620, segm_mAP_m: 0.4790, segm_mAP_l: 0.5840, segm_mAP_copypaste: 0.416 0.771 0.395 0.262 0.479 0.584
2023-06-30 12:32:28,414 - mmdet - INFO - Epoch [12][40/166]	lr: 2.019e-05, eta: 0:50:48, time: 2.249, data_time: 0.165, memory: 20021, loss_rpn_cls: 0.0188, loss_rpn_bbox: 0.0478, s0.loss_cls: 0.1555, s0.acc: 93.6792, s0.loss_bbox: 0.1249, s0.loss_mask: 0.2106, s1.loss_cls: 0.0844, s1.acc: 92.9343, s1.loss_bbox: 0.0495, s1.loss_mask: 0.1023, s2.loss_cls: 0.0463, s2.acc: 91.9654, s2.loss_bbox: 0.0151, s2.loss_mask: 0.0493, loss: 0.9046
2023-06-30 12:33:54,864 - mmdet - INFO - Epoch [12][80/166]	lr: 1.926e-05, eta: 0:49:26, time: 2.161, data_time: 0.048, memory: 20021, loss_rpn_cls: 0.0197, loss_rpn_bbox: 0.0303, s0.loss_cls: 0.1178, s0.acc: 95.2173, s0.loss_bbox: 0.0866, s0.loss_mask: 0.1865, s1.loss_cls: 0.0635, s1.acc: 94.7933, s1.loss_bbox: 0.0387, s1.loss_mask: 0.0914, s2.loss_cls: 0.0352, s2.acc: 94.1920, s2.loss_bbox: 0.0134, s2.loss_mask: 0.0446, loss: 0.7277
2023-06-30 12:35:23,070 - mmdet - INFO - Epoch [12][120/166]	lr: 1.835e-05, eta: 0:48:06, time: 2.205, data_time: 0.051, memory: 20021, loss_rpn_cls: 0.0198, loss_rpn_bbox: 0.0344, s0.loss_cls: 0.1310, s0.acc: 94.7900, s0.loss_bbox: 0.0932, s0.loss_mask: 0.1915, s1.loss_cls: 0.0661, s1.acc: 94.7984, s1.loss_bbox: 0.0406, s1.loss_mask: 0.0958, s2.loss_cls: 0.0373, s2.acc: 93.7890, s2.loss_bbox: 0.0143, s2.loss_mask: 0.0465, loss: 0.7706
2023-06-30 12:36:48,684 - mmdet - INFO - Epoch [12][160/166]	lr: 1.744e-05, eta: 0:46:43, time: 2.140, data_time: 0.047, memory: 20021, loss_rpn_cls: 0.0168, loss_rpn_bbox: 0.0345, s0.loss_cls: 0.1442, s0.acc: 94.3188, s0.loss_bbox: 0.1039, s0.loss_mask: 0.2057, s1.loss_cls: 0.0744, s1.acc: 94.0035, s1.loss_bbox: 0.0449, s1.loss_mask: 0.0994, s2.loss_cls: 0.0410, s2.acc: 93.1274, s2.loss_bbox: 0.0151, s2.loss_mask: 0.0477, loss: 0.8276
2023-06-30 12:38:00,392 - mmdet - INFO - Evaluating segm...
2023-06-30 12:38:01,104 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.420
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.767
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.409
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.273
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.477
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.607
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.566
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.566
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.566
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.503
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.592
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.635

2023-06-30 12:38:01,588 - mmdet - INFO - The previous best checkpoint /storage/tungnx/mmdetection-2.26.0/work_dirs/hubmap/1class_ds1/detectors_res2net101/fold0/2048/best_segm_mAP_epoch_11.pth was removed
2023-06-30 12:38:25,939 - mmdet - INFO - Now best checkpoint is saved as best_segm_mAP_epoch_12.pth.
2023-06-30 12:38:25,940 - mmdet - INFO - Best segm_mAP is 0.4200 at 12 epoch.
2023-06-30 12:38:25,940 - mmdet - INFO - Exp name: custom_config_ds12_fold0.py
2023-06-30 12:38:25,940 - mmdet - INFO - Epoch(val) [12][84]	segm_mAP: 0.4200, segm_mAP_50: 0.7670, segm_mAP_75: 0.4090, segm_mAP_s: 0.2730, segm_mAP_m: 0.4770, segm_mAP_l: 0.6070, segm_mAP_copypaste: 0.420 0.767 0.409 0.273 0.477 0.607
2023-06-30 12:39:55,557 - mmdet - INFO - Epoch [13][40/166]	lr: 1.641e-05, eta: 0:45:01, time: 2.240, data_time: 0.156, memory: 20021, loss_rpn_cls: 0.0243, loss_rpn_bbox: 0.0366, s0.loss_cls: 0.1412, s0.acc: 94.4482, s0.loss_bbox: 0.1000, s0.loss_mask: 0.1980, s1.loss_cls: 0.0741, s1.acc: 94.1562, s1.loss_bbox: 0.0440, s1.loss_mask: 0.0972, s2.loss_cls: 0.0403, s2.acc: 93.2137, s2.loss_bbox: 0.0142, s2.loss_mask: 0.0469, loss: 0.8169
2023-06-30 12:41:21,558 - mmdet - INFO - Epoch [13][80/166]	lr: 1.553e-05, eta: 0:43:39, time: 2.150, data_time: 0.052, memory: 20021, loss_rpn_cls: 0.0192, loss_rpn_bbox: 0.0355, s0.loss_cls: 0.1379, s0.acc: 94.5288, s0.loss_bbox: 0.0960, s0.loss_mask: 0.2028, s1.loss_cls: 0.0709, s1.acc: 94.2891, s1.loss_bbox: 0.0404, s1.loss_mask: 0.0992, s2.loss_cls: 0.0388, s2.acc: 93.3986, s2.loss_bbox: 0.0131, s2.loss_mask: 0.0486, loss: 0.8023
2023-06-30 12:42:48,051 - mmdet - INFO - Epoch [13][120/166]	lr: 1.466e-05, eta: 0:42:16, time: 2.162, data_time: 0.041, memory: 20021, loss_rpn_cls: 0.0244, loss_rpn_bbox: 0.0327, s0.loss_cls: 0.1339, s0.acc: 94.7437, s0.loss_bbox: 0.0981, s0.loss_mask: 0.1906, s1.loss_cls: 0.0689, s1.acc: 94.5310, s1.loss_bbox: 0.0418, s1.loss_mask: 0.0915, s2.loss_cls: 0.0380, s2.acc: 93.7075, s2.loss_bbox: 0.0140, s2.loss_mask: 0.0445, loss: 0.7784
2023-06-30 12:44:12,957 - mmdet - INFO - Epoch [13][160/166]	lr: 1.381e-05, eta: 0:40:53, time: 2.123, data_time: 0.048, memory: 20021, loss_rpn_cls: 0.0201, loss_rpn_bbox: 0.0334, s0.loss_cls: 0.1258, s0.acc: 95.0073, s0.loss_bbox: 0.0860, s0.loss_mask: 0.1960, s1.loss_cls: 0.0652, s1.acc: 94.6840, s1.loss_bbox: 0.0373, s1.loss_mask: 0.0957, s2.loss_cls: 0.0351, s2.acc: 94.0984, s2.loss_bbox: 0.0122, s2.loss_mask: 0.0465, loss: 0.7532
2023-06-30 12:45:24,798 - mmdet - INFO - Evaluating segm...
2023-06-30 12:45:25,495 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.430
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.771
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.416
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.278
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.485
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.610
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.575
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.575
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.575
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.507
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.601
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.661

2023-06-30 12:45:25,974 - mmdet - INFO - The previous best checkpoint /storage/tungnx/mmdetection-2.26.0/work_dirs/hubmap/1class_ds1/detectors_res2net101/fold0/2048/best_segm_mAP_epoch_12.pth was removed
2023-06-30 12:45:50,497 - mmdet - INFO - Now best checkpoint is saved as best_segm_mAP_epoch_13.pth.
2023-06-30 12:45:50,498 - mmdet - INFO - Best segm_mAP is 0.4300 at 13 epoch.
2023-06-30 12:45:50,498 - mmdet - INFO - Exp name: custom_config_ds12_fold0.py
2023-06-30 12:45:50,499 - mmdet - INFO - Epoch(val) [13][84]	segm_mAP: 0.4300, segm_mAP_50: 0.7710, segm_mAP_75: 0.4160, segm_mAP_s: 0.2780, segm_mAP_m: 0.4850, segm_mAP_l: 0.6100, segm_mAP_copypaste: 0.430 0.771 0.416 0.278 0.485 0.610
2023-06-30 12:47:19,199 - mmdet - INFO - Epoch [14][40/166]	lr: 1.284e-05, eta: 0:39:12, time: 2.217, data_time: 0.127, memory: 20021, loss_rpn_cls: 0.0154, loss_rpn_bbox: 0.0303, s0.loss_cls: 0.1257, s0.acc: 95.1147, s0.loss_bbox: 0.0923, s0.loss_mask: 0.1885, s1.loss_cls: 0.0659, s1.acc: 94.6667, s1.loss_bbox: 0.0402, s1.loss_mask: 0.0932, s2.loss_cls: 0.0362, s2.acc: 93.7800, s2.loss_bbox: 0.0132, s2.loss_mask: 0.0454, loss: 0.7463
2023-06-30 12:48:45,162 - mmdet - INFO - Epoch [14][80/166]	lr: 1.203e-05, eta: 0:37:49, time: 2.149, data_time: 0.054, memory: 20021, loss_rpn_cls: 0.0132, loss_rpn_bbox: 0.0335, s0.loss_cls: 0.1232, s0.acc: 95.0049, s0.loss_bbox: 0.0916, s0.loss_mask: 0.1801, s1.loss_cls: 0.0637, s1.acc: 94.8713, s1.loss_bbox: 0.0404, s1.loss_mask: 0.0893, s2.loss_cls: 0.0355, s2.acc: 94.2949, s2.loss_bbox: 0.0143, s2.loss_mask: 0.0439, loss: 0.7287
2023-06-30 12:50:11,832 - mmdet - INFO - Epoch [14][120/166]	lr: 1.123e-05, eta: 0:36:27, time: 2.167, data_time: 0.040, memory: 20021, loss_rpn_cls: 0.0178, loss_rpn_bbox: 0.0321, s0.loss_cls: 0.1257, s0.acc: 95.2271, s0.loss_bbox: 0.0927, s0.loss_mask: 0.1927, s1.loss_cls: 0.0626, s1.acc: 95.2485, s1.loss_bbox: 0.0380, s1.loss_mask: 0.0951, s2.loss_cls: 0.0345, s2.acc: 94.0777, s2.loss_bbox: 0.0124, s2.loss_mask: 0.0460, loss: 0.7496
2023-06-30 12:51:39,160 - mmdet - INFO - Epoch [14][160/166]	lr: 1.045e-05, eta: 0:35:04, time: 2.183, data_time: 0.057, memory: 20021, loss_rpn_cls: 0.0146, loss_rpn_bbox: 0.0392, s0.loss_cls: 0.1430, s0.acc: 94.2212, s0.loss_bbox: 0.1072, s0.loss_mask: 0.1929, s1.loss_cls: 0.0711, s1.acc: 94.1768, s1.loss_bbox: 0.0463, s1.loss_mask: 0.0953, s2.loss_cls: 0.0379, s2.acc: 93.7803, s2.loss_bbox: 0.0162, s2.loss_mask: 0.0466, loss: 0.8104
2023-06-30 12:52:49,762 - mmdet - INFO - Evaluating segm...
2023-06-30 12:52:50,469 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.431
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.782
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.416
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.272
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.490
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.629
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.568
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.568
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.568
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.488
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.601
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.658

2023-06-30 12:52:50,501 - mmdet - INFO - The previous best checkpoint /storage/tungnx/mmdetection-2.26.0/work_dirs/hubmap/1class_ds1/detectors_res2net101/fold0/2048/best_segm_mAP_epoch_13.pth was removed
2023-06-30 12:53:15,222 - mmdet - INFO - Now best checkpoint is saved as best_segm_mAP_epoch_14.pth.
2023-06-30 12:53:15,223 - mmdet - INFO - Best segm_mAP is 0.4310 at 14 epoch.
2023-06-30 12:53:15,223 - mmdet - INFO - Exp name: custom_config_ds12_fold0.py
2023-06-30 12:53:15,223 - mmdet - INFO - Epoch(val) [14][84]	segm_mAP: 0.4310, segm_mAP_50: 0.7820, segm_mAP_75: 0.4160, segm_mAP_s: 0.2720, segm_mAP_m: 0.4900, segm_mAP_l: 0.6290, segm_mAP_copypaste: 0.431 0.782 0.416 0.272 0.490 0.629
2023-06-30 12:54:45,556 - mmdet - INFO - Epoch [15][40/166]	lr: 9.577e-06, eta: 0:33:25, time: 2.258, data_time: 0.124, memory: 20021, loss_rpn_cls: 0.0193, loss_rpn_bbox: 0.0291, s0.loss_cls: 0.1267, s0.acc: 94.9121, s0.loss_bbox: 0.0902, s0.loss_mask: 0.1813, s1.loss_cls: 0.0659, s1.acc: 94.7366, s1.loss_bbox: 0.0391, s1.loss_mask: 0.0902, s2.loss_cls: 0.0347, s2.acc: 94.3779, s2.loss_bbox: 0.0133, s2.loss_mask: 0.0441, loss: 0.7340
2023-06-30 12:56:10,570 - mmdet - INFO - Epoch [15][80/166]	lr: 8.844e-06, eta: 0:32:01, time: 2.125, data_time: 0.046, memory: 20021, loss_rpn_cls: 0.0216, loss_rpn_bbox: 0.0290, s0.loss_cls: 0.1126, s0.acc: 95.5835, s0.loss_bbox: 0.0812, s0.loss_mask: 0.1852, s1.loss_cls: 0.0584, s1.acc: 95.2782, s1.loss_bbox: 0.0363, s1.loss_mask: 0.0913, s2.loss_cls: 0.0320, s2.acc: 94.6317, s2.loss_bbox: 0.0131, s2.loss_mask: 0.0450, loss: 0.7056
2023-06-30 12:57:36,355 - mmdet - INFO - Epoch [15][120/166]	lr: 8.134e-06, eta: 0:30:38, time: 2.145, data_time: 0.050, memory: 20021, loss_rpn_cls: 0.0209, loss_rpn_bbox: 0.0334, s0.loss_cls: 0.1213, s0.acc: 95.0830, s0.loss_bbox: 0.0954, s0.loss_mask: 0.1870, s1.loss_cls: 0.0630, s1.acc: 94.8742, s1.loss_bbox: 0.0410, s1.loss_mask: 0.0928, s2.loss_cls: 0.0355, s2.acc: 93.7079, s2.loss_bbox: 0.0139, s2.loss_mask: 0.0453, loss: 0.7493
2023-06-30 12:59:03,447 - mmdet - INFO - Epoch [15][160/166]	lr: 7.448e-06, eta: 0:29:15, time: 2.177, data_time: 0.062, memory: 20021, loss_rpn_cls: 0.0213, loss_rpn_bbox: 0.0346, s0.loss_cls: 0.1363, s0.acc: 94.8364, s0.loss_bbox: 0.0962, s0.loss_mask: 0.2066, s1.loss_cls: 0.0656, s1.acc: 95.0052, s1.loss_bbox: 0.0419, s1.loss_mask: 0.1020, s2.loss_cls: 0.0375, s2.acc: 93.7023, s2.loss_bbox: 0.0144, s2.loss_mask: 0.0488, loss: 0.8052
2023-06-30 13:00:14,608 - mmdet - INFO - Evaluating segm...
2023-06-30 13:00:15,257 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.435
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.779
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.416
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.277
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.494
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.620
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.574
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.574
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.574
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.504
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.603
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.652

2023-06-30 13:00:15,677 - mmdet - INFO - The previous best checkpoint /storage/tungnx/mmdetection-2.26.0/work_dirs/hubmap/1class_ds1/detectors_res2net101/fold0/2048/best_segm_mAP_epoch_14.pth was removed
2023-06-30 13:00:39,188 - mmdet - INFO - Now best checkpoint is saved as best_segm_mAP_epoch_15.pth.
2023-06-30 13:00:39,188 - mmdet - INFO - Best segm_mAP is 0.4350 at 15 epoch.
2023-06-30 13:00:39,188 - mmdet - INFO - Exp name: custom_config_ds12_fold0.py
2023-06-30 13:00:39,189 - mmdet - INFO - Epoch(val) [15][84]	segm_mAP: 0.4350, segm_mAP_50: 0.7790, segm_mAP_75: 0.4160, segm_mAP_s: 0.2770, segm_mAP_m: 0.4940, segm_mAP_l: 0.6200, segm_mAP_copypaste: 0.435 0.779 0.416 0.277 0.494 0.620
2023-06-30 13:02:08,251 - mmdet - INFO - Epoch [16][40/166]	lr: 6.691e-06, eta: 0:27:36, time: 2.226, data_time: 0.137, memory: 20021, loss_rpn_cls: 0.0146, loss_rpn_bbox: 0.0280, s0.loss_cls: 0.1179, s0.acc: 95.3784, s0.loss_bbox: 0.0892, s0.loss_mask: 0.1876, s1.loss_cls: 0.0606, s1.acc: 95.2386, s1.loss_bbox: 0.0394, s1.loss_mask: 0.0929, s2.loss_cls: 0.0343, s2.acc: 94.3264, s2.loss_bbox: 0.0143, s2.loss_mask: 0.0450, loss: 0.7238
2023-06-30 13:03:34,129 - mmdet - INFO - Epoch [16][80/166]	lr: 6.060e-06, eta: 0:26:13, time: 2.147, data_time: 0.058, memory: 20021, loss_rpn_cls: 0.0119, loss_rpn_bbox: 0.0287, s0.loss_cls: 0.1160, s0.acc: 95.3735, s0.loss_bbox: 0.0816, s0.loss_mask: 0.1768, s1.loss_cls: 0.0585, s1.acc: 95.1450, s1.loss_bbox: 0.0350, s1.loss_mask: 0.0880, s2.loss_cls: 0.0317, s2.acc: 94.7350, s2.loss_bbox: 0.0131, s2.loss_mask: 0.0429, loss: 0.6842
2023-06-30 13:05:00,029 - mmdet - INFO - Epoch [16][120/166]	lr: 5.457e-06, eta: 0:24:50, time: 2.147, data_time: 0.058, memory: 20021, loss_rpn_cls: 0.0203, loss_rpn_bbox: 0.0339, s0.loss_cls: 0.1283, s0.acc: 95.0635, s0.loss_bbox: 0.0928, s0.loss_mask: 0.1922, s1.loss_cls: 0.0629, s1.acc: 95.2758, s1.loss_bbox: 0.0382, s1.loss_mask: 0.0953, s2.loss_cls: 0.0339, s2.acc: 94.5214, s2.loss_bbox: 0.0134, s2.loss_mask: 0.0468, loss: 0.7581
2023-06-30 13:06:27,059 - mmdet - INFO - Epoch [16][160/166]	lr: 4.881e-06, eta: 0:23:26, time: 2.176, data_time: 0.045, memory: 20021, loss_rpn_cls: 0.0168, loss_rpn_bbox: 0.0249, s0.loss_cls: 0.1222, s0.acc: 95.2832, s0.loss_bbox: 0.0892, s0.loss_mask: 0.1848, s1.loss_cls: 0.0604, s1.acc: 95.3207, s1.loss_bbox: 0.0391, s1.loss_mask: 0.0909, s2.loss_cls: 0.0324, s2.acc: 94.7524, s2.loss_bbox: 0.0138, s2.loss_mask: 0.0438, loss: 0.7182
2023-06-30 13:07:39,809 - mmdet - INFO - Evaluating segm...
2023-06-30 13:07:40,565 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.426
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.785
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.417
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.266
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.489
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.623
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.571
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.571
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.571
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.500
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.600
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.648

2023-06-30 13:07:40,572 - mmdet - INFO - Exp name: custom_config_ds12_fold0.py
2023-06-30 13:07:40,572 - mmdet - INFO - Epoch(val) [16][84]	segm_mAP: 0.4260, segm_mAP_50: 0.7850, segm_mAP_75: 0.4170, segm_mAP_s: 0.2660, segm_mAP_m: 0.4890, segm_mAP_l: 0.6230, segm_mAP_copypaste: 0.426 0.785 0.417 0.266 0.489 0.623
2023-06-30 13:09:10,897 - mmdet - INFO - Epoch [17][40/166]	lr: 4.255e-06, eta: 0:21:48, time: 2.258, data_time: 0.139, memory: 20021, loss_rpn_cls: 0.0140, loss_rpn_bbox: 0.0323, s0.loss_cls: 0.1285, s0.acc: 95.0586, s0.loss_bbox: 0.0921, s0.loss_mask: 0.1856, s1.loss_cls: 0.0643, s1.acc: 94.8817, s1.loss_bbox: 0.0381, s1.loss_mask: 0.0916, s2.loss_cls: 0.0350, s2.acc: 94.1270, s2.loss_bbox: 0.0133, s2.loss_mask: 0.0438, loss: 0.7385
2023-06-30 13:10:37,372 - mmdet - INFO - Epoch [17][80/166]	lr: 3.743e-06, eta: 0:20:25, time: 2.162, data_time: 0.055, memory: 20021, loss_rpn_cls: 0.0171, loss_rpn_bbox: 0.0304, s0.loss_cls: 0.1187, s0.acc: 95.2295, s0.loss_bbox: 0.0869, s0.loss_mask: 0.1865, s1.loss_cls: 0.0562, s1.acc: 95.5049, s1.loss_bbox: 0.0397, s1.loss_mask: 0.0932, s2.loss_cls: 0.0315, s2.acc: 94.6891, s2.loss_bbox: 0.0146, s2.loss_mask: 0.0463, loss: 0.7210
2023-06-30 13:12:03,255 - mmdet - INFO - Epoch [17][120/166]	lr: 3.261e-06, eta: 0:19:01, time: 2.147, data_time: 0.046, memory: 20021, loss_rpn_cls: 0.0119, loss_rpn_bbox: 0.0289, s0.loss_cls: 0.1192, s0.acc: 95.2954, s0.loss_bbox: 0.0878, s0.loss_mask: 0.1781, s1.loss_cls: 0.0592, s1.acc: 95.2966, s1.loss_bbox: 0.0377, s1.loss_mask: 0.0880, s2.loss_cls: 0.0330, s2.acc: 94.4177, s2.loss_bbox: 0.0129, s2.loss_mask: 0.0425, loss: 0.6992
2023-06-30 13:13:29,149 - mmdet - INFO - Epoch [17][160/166]	lr: 2.810e-06, eta: 0:17:38, time: 2.147, data_time: 0.054, memory: 20021, loss_rpn_cls: 0.0148, loss_rpn_bbox: 0.0305, s0.loss_cls: 0.1121, s0.acc: 95.5835, s0.loss_bbox: 0.0857, s0.loss_mask: 0.1836, s1.loss_cls: 0.0549, s1.acc: 95.4533, s1.loss_bbox: 0.0379, s1.loss_mask: 0.0904, s2.loss_cls: 0.0311, s2.acc: 94.9644, s2.loss_bbox: 0.0132, s2.loss_mask: 0.0439, loss: 0.6981
2023-06-30 13:14:41,095 - mmdet - INFO - Evaluating segm...
2023-06-30 13:14:41,746 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.428
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.778
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.409
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.273
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.488
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.613
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.569
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.569
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.569
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.498
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.600
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.638

2023-06-30 13:14:41,752 - mmdet - INFO - Exp name: custom_config_ds12_fold0.py
2023-06-30 13:14:41,753 - mmdet - INFO - Epoch(val) [17][84]	segm_mAP: 0.4280, segm_mAP_50: 0.7780, segm_mAP_75: 0.4090, segm_mAP_s: 0.2730, segm_mAP_m: 0.4880, segm_mAP_l: 0.6130, segm_mAP_copypaste: 0.428 0.778 0.409 0.273 0.488 0.613
2023-06-30 13:16:11,759 - mmdet - INFO - Epoch [18][40/166]	lr: 2.331e-06, eta: 0:16:00, time: 2.250, data_time: 0.149, memory: 20021, loss_rpn_cls: 0.0189, loss_rpn_bbox: 0.0312, s0.loss_cls: 0.1249, s0.acc: 95.0732, s0.loss_bbox: 0.0938, s0.loss_mask: 0.1808, s1.loss_cls: 0.0621, s1.acc: 95.1146, s1.loss_bbox: 0.0410, s1.loss_mask: 0.0884, s2.loss_cls: 0.0367, s2.acc: 94.2190, s2.loss_bbox: 0.0134, s2.loss_mask: 0.0428, loss: 0.7340
2023-06-30 13:17:38,034 - mmdet - INFO - Epoch [18][80/166]	lr: 1.949e-06, eta: 0:14:37, time: 2.157, data_time: 0.048, memory: 20021, loss_rpn_cls: 0.0125, loss_rpn_bbox: 0.0287, s0.loss_cls: 0.1183, s0.acc: 95.2783, s0.loss_bbox: 0.0866, s0.loss_mask: 0.1907, s1.loss_cls: 0.0588, s1.acc: 95.4388, s1.loss_bbox: 0.0391, s1.loss_mask: 0.0946, s2.loss_cls: 0.0341, s2.acc: 94.4784, s2.loss_bbox: 0.0138, s2.loss_mask: 0.0451, loss: 0.7224
2023-06-30 13:19:03,879 - mmdet - INFO - Epoch [18][120/166]	lr: 1.600e-06, eta: 0:13:13, time: 2.146, data_time: 0.054, memory: 20021, loss_rpn_cls: 0.0130, loss_rpn_bbox: 0.0307, s0.loss_cls: 0.1150, s0.acc: 95.5591, s0.loss_bbox: 0.0872, s0.loss_mask: 0.1792, s1.loss_cls: 0.0576, s1.acc: 95.6190, s1.loss_bbox: 0.0397, s1.loss_mask: 0.0887, s2.loss_cls: 0.0330, s2.acc: 94.5533, s2.loss_bbox: 0.0137, s2.loss_mask: 0.0431, loss: 0.7009
2023-06-30 13:20:29,615 - mmdet - INFO - Epoch [18][160/166]	lr: 1.285e-06, eta: 0:11:49, time: 2.143, data_time: 0.044, memory: 20021, loss_rpn_cls: 0.0157, loss_rpn_bbox: 0.0261, s0.loss_cls: 0.1048, s0.acc: 95.8447, s0.loss_bbox: 0.0781, s0.loss_mask: 0.1887, s1.loss_cls: 0.0536, s1.acc: 95.7215, s1.loss_bbox: 0.0356, s1.loss_mask: 0.0925, s2.loss_cls: 0.0288, s2.acc: 95.2692, s2.loss_bbox: 0.0128, s2.loss_mask: 0.0454, loss: 0.6821
2023-06-30 13:21:41,158 - mmdet - INFO - Evaluating segm...
2023-06-30 13:21:41,880 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.425
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.784
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.404
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.271
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.485
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.616
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.565
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.565
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.565
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.499
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.591
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.642

2023-06-30 13:21:41,887 - mmdet - INFO - Exp name: custom_config_ds12_fold0.py
2023-06-30 13:21:41,887 - mmdet - INFO - Epoch(val) [18][84]	segm_mAP: 0.4250, segm_mAP_50: 0.7840, segm_mAP_75: 0.4040, segm_mAP_s: 0.2710, segm_mAP_m: 0.4850, segm_mAP_l: 0.6160, segm_mAP_copypaste: 0.425 0.784 0.404 0.271 0.485 0.616
2023-06-30 13:23:10,790 - mmdet - INFO - Epoch [19][40/166]	lr: 9.645e-07, eta: 0:10:12, time: 2.222, data_time: 0.129, memory: 20021, loss_rpn_cls: 0.0140, loss_rpn_bbox: 0.0304, s0.loss_cls: 0.1243, s0.acc: 95.2441, s0.loss_bbox: 0.0919, s0.loss_mask: 0.1794, s1.loss_cls: 0.0595, s1.acc: 95.3648, s1.loss_bbox: 0.0384, s1.loss_mask: 0.0875, s2.loss_cls: 0.0319, s2.acc: 95.0542, s2.loss_bbox: 0.0139, s2.loss_mask: 0.0426, loss: 0.7138
2023-06-30 13:24:37,229 - mmdet - INFO - Epoch [19][80/166]	lr: 7.229e-07, eta: 0:08:48, time: 2.161, data_time: 0.054, memory: 20021, loss_rpn_cls: 0.0181, loss_rpn_bbox: 0.0344, s0.loss_cls: 0.1265, s0.acc: 95.0073, s0.loss_bbox: 0.0909, s0.loss_mask: 0.1916, s1.loss_cls: 0.0632, s1.acc: 94.9828, s1.loss_bbox: 0.0387, s1.loss_mask: 0.0945, s2.loss_cls: 0.0351, s2.acc: 94.2799, s2.loss_bbox: 0.0135, s2.loss_mask: 0.0459, loss: 0.7525
2023-06-30 13:26:03,515 - mmdet - INFO - Epoch [19][120/166]	lr: 5.160e-07, eta: 0:07:24, time: 2.157, data_time: 0.043, memory: 20021, loss_rpn_cls: 0.0125, loss_rpn_bbox: 0.0251, s0.loss_cls: 0.1120, s0.acc: 95.6006, s0.loss_bbox: 0.0865, s0.loss_mask: 0.1847, s1.loss_cls: 0.0551, s1.acc: 95.5854, s1.loss_bbox: 0.0382, s1.loss_mask: 0.0925, s2.loss_cls: 0.0308, s2.acc: 94.9232, s2.loss_bbox: 0.0137, s2.loss_mask: 0.0448, loss: 0.6960
2023-06-30 13:27:31,759 - mmdet - INFO - Epoch [19][160/166]	lr: 3.442e-07, eta: 0:06:01, time: 2.206, data_time: 0.061, memory: 20021, loss_rpn_cls: 0.0171, loss_rpn_bbox: 0.0302, s0.loss_cls: 0.1066, s0.acc: 95.9082, s0.loss_bbox: 0.0768, s0.loss_mask: 0.1726, s1.loss_cls: 0.0535, s1.acc: 95.7794, s1.loss_bbox: 0.0336, s1.loss_mask: 0.0846, s2.loss_cls: 0.0298, s2.acc: 95.1745, s2.loss_bbox: 0.0123, s2.loss_mask: 0.0411, loss: 0.6582
2023-06-30 13:28:42,729 - mmdet - INFO - Evaluating segm...
2023-06-30 13:28:43,453 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.428
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.779
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.416
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.272
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.490
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.616
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.570
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.570
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.570
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.504
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.596
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.645

2023-06-30 13:28:43,459 - mmdet - INFO - Exp name: custom_config_ds12_fold0.py
2023-06-30 13:28:43,459 - mmdet - INFO - Epoch(val) [19][84]	segm_mAP: 0.4280, segm_mAP_50: 0.7790, segm_mAP_75: 0.4160, segm_mAP_s: 0.2720, segm_mAP_m: 0.4900, segm_mAP_l: 0.6160, segm_mAP_copypaste: 0.428 0.779 0.416 0.272 0.490 0.616
2023-06-30 13:30:12,905 - mmdet - INFO - Epoch [20][40/166]	lr: 1.903e-07, eta: 0:04:24, time: 2.236, data_time: 0.134, memory: 20021, loss_rpn_cls: 0.0141, loss_rpn_bbox: 0.0296, s0.loss_cls: 0.1164, s0.acc: 95.5908, s0.loss_bbox: 0.0870, s0.loss_mask: 0.1870, s1.loss_cls: 0.0583, s1.acc: 95.2587, s1.loss_bbox: 0.0363, s1.loss_mask: 0.0911, s2.loss_cls: 0.0312, s2.acc: 94.9425, s2.loss_bbox: 0.0126, s2.loss_mask: 0.0444, loss: 0.7081
2023-06-30 13:31:39,337 - mmdet - INFO - Epoch [20][80/166]	lr: 9.465e-08, eta: 0:03:00, time: 2.161, data_time: 0.042, memory: 20021, loss_rpn_cls: 0.0120, loss_rpn_bbox: 0.0282, s0.loss_cls: 0.1154, s0.acc: 95.4419, s0.loss_bbox: 0.0799, s0.loss_mask: 0.1822, s1.loss_cls: 0.0553, s1.acc: 95.7159, s1.loss_bbox: 0.0355, s1.loss_mask: 0.0914, s2.loss_cls: 0.0298, s2.acc: 95.4373, s2.loss_bbox: 0.0134, s2.loss_mask: 0.0442, loss: 0.6872
2023-06-30 13:33:05,093 - mmdet - INFO - Epoch [20][120/166]	lr: 3.472e-08, eta: 0:01:36, time: 2.144, data_time: 0.039, memory: 20021, loss_rpn_cls: 0.0147, loss_rpn_bbox: 0.0258, s0.loss_cls: 0.1066, s0.acc: 95.8887, s0.loss_bbox: 0.0759, s0.loss_mask: 0.1720, s1.loss_cls: 0.0527, s1.acc: 95.9874, s1.loss_bbox: 0.0334, s1.loss_mask: 0.0857, s2.loss_cls: 0.0290, s2.acc: 95.5459, s2.loss_bbox: 0.0126, s2.loss_mask: 0.0418, loss: 0.6502
2023-06-30 13:34:32,959 - mmdet - INFO - Epoch [20][160/166]	lr: 1.055e-08, eta: 0:00:12, time: 2.197, data_time: 0.062, memory: 20021, loss_rpn_cls: 0.0139, loss_rpn_bbox: 0.0294, s0.loss_cls: 0.1135, s0.acc: 95.3906, s0.loss_bbox: 0.0896, s0.loss_mask: 0.1880, s1.loss_cls: 0.0565, s1.acc: 95.5815, s1.loss_bbox: 0.0398, s1.loss_mask: 0.0929, s2.loss_cls: 0.0319, s2.acc: 94.9721, s2.loss_bbox: 0.0140, s2.loss_mask: 0.0451, loss: 0.7146
2023-06-30 13:34:45,756 - mmdet - INFO - Saving checkpoint at 20 epochs
2023-06-30 13:35:51,777 - mmdet - INFO - Evaluating segm...
2023-06-30 13:35:52,436 - mmdet - INFO - 
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.427
 Average Precision  (AP) @[ IoU=0.50      | area=   all | maxDets=1000 ] = 0.779
 Average Precision  (AP) @[ IoU=0.75      | area=   all | maxDets=1000 ] = 0.413
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.272
 Average Precision  (AP) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.489
 Average Precision  (AP) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.610
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=100 ] = 0.567
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=300 ] = 0.567
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=   all | maxDets=1000 ] = 0.567
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= small | maxDets=1000 ] = 0.498
 Average Recall     (AR) @[ IoU=0.50:0.95 | area=medium | maxDets=1000 ] = 0.596
 Average Recall     (AR) @[ IoU=0.50:0.95 | area= large | maxDets=1000 ] = 0.638

2023-06-30 13:35:52,442 - mmdet - INFO - Exp name: custom_config_ds12_fold0.py
2023-06-30 13:35:52,443 - mmdet - INFO - Epoch(val) [20][84]	segm_mAP: 0.4270, segm_mAP_50: 0.7790, segm_mAP_75: 0.4130, segm_mAP_s: 0.2720, segm_mAP_m: 0.4890, segm_mAP_l: 0.6100, segm_mAP_copypaste: 0.427 0.779 0.413 0.272 0.489 0.610
